<?php

class VO_Users {
	const _ECP = 'USE';	// Error Code Prefix
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
  
	/**
	 * 
	 * @param WOOOF $wo
	 * @param VO_TblUser $obj
	 * @param bool $fetchBack
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static 
	function save( WOOOF $wo, VO_TblUser &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	    
		$t1 = new WOOOF_dataBaseTable($wo->db, 'voice_users');
		if ( !$t1->constructedOk ) { return false; }
		
		if ( !$wo->hasContent($obj->userId) ) {
			$wo->logError(self::_ECP."0010 No value provided for [userId]" );
			return false;
		}
		
		if ( $wo->hasContent($obj->id) ) {
			// update
			$res = $t1->updateRowFromArraySimple( $obj->toArray() );
			if ( $res === FALSE ) { return FALSE; }
		}
		else {
			// insert
			$verificationToken		= WOOOF::randomString(255);
			 
			$obj->isDeleted			= '0';
			$obj->isActive			= '1';
			$obj->isVerified		= '0';
			$obj->verificationToken = $verificationToken;
			$obj->createdDateTime 	= WOOOF::currentGMTDateTime();
			$obj->updatedDateTime	= $obj->createdDateTime;
			
			$newId = $t1->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
			
			$succ = self::handleVerificationToken($wo, $obj->id, $obj->username, $verificationToken );
			if ( $succ === FALSE ) { return FALSE; }
		}

		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
	  
		return $obj->id;
	}	// save
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param VO_TblPersonProfile $obj
	 * @return false | id
	 */
	public static 
	function savePersonProfile( WOOOF $wo, VO_TblPersonProfile &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	    
		$t1 = new WOOOF_dataBaseTable($wo->db, 'person_profiles');
		if ( !$t1->constructedOk ) { return false; }
		
		if ( $wo->hasContent($obj->id) ) {
			// update
			$obj->updatedDateTime	= WOOOF::currentGMTDateTime();

			$res = $t1->updateRowFromArraySimple($obj->toArray());
			if($res === FALSE) { return false; }
		}
		else {
			// insert
			$obj->isDeleted 	= '0';
			$obj->createdDateTime 	= WOOOF::currentGMTDateTime();
			$obj->updatedDateTime	= $obj->createdDateTime;
			
			$newId = $t1->insertRowFromArraySimple($obj->toArray());
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
		}

		$usActId = VO_Users::saveAction( $wo, 'PR1', null, null, 'person_profile' );
		
		if ( $fetchBack ) {
			// Get back into $us based on id
			// TODO:
		}
	  
		return $obj->id;
	}	// save
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @return false | array[ ]
	 */
	public static
	function getFull( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  $voiceUserId" );
		 
		if(!$wo->hasContent($voiceUserId)) {
			$wo->logError(self::_ECP."0011 No value provided for [voiceUserId]");
			return false;
		}
		
		$main = VO_ProfileData::getMainInfo($wo, $voiceUserId);
		if($main === FALSE) { return false; }
		
		$stats = VO_ProfileData::getStatsInfo($wo, $voiceUserId);
		if($stats === FALSE) { return false; }
		
		$badges = VO_Badges::getVoiceUserBadges($wo, $voiceUserId);
		if($badges === FALSE) { return false; }
		
		$addresses = VO_ProfileData::getAddressesInfo($wo, $voiceUserId);
		if($addresses === FALSE) { return false; }
	
		$educations = VO_ProfileData::getEducationInfo($wo, $voiceUserId);
		if($educations === FALSE) { return false; }
		
		$socialAccounts = VO_ProfileData::getSocialAccounts($wo, $voiceUserId);
		if($socialAccounts === FALSE) { return false; }
		
		$skills = VO_ProfileData::getSkills($wo, $voiceUserId);
		if($skills === FALSE) { return false; }
		
		$experiences = VO_ProfileData::getExperiences($wo, $voiceUserId);
		if($experiences === FALSE) { return false; }
		
		//get profile completion percentage
		$completeness = VO_ProfileData::getProfileCompletion($wo, $main, $addresses, $educations, $socialAccounts, $skills, $experiences);

		// TODO: Check how $wo->app->userId can be NULL (api calls)
		$connections = VO_Social::getConnectionInfo($wo, $wo->app->userId, [[$voiceUserId, 'PRS']]);
		if($connections === FALSE) { return false; }
		
		return [
			'main' => $main,
			'stats' => $stats,
			'badges' => $badges,
			'profileCompleteness' => $completeness,
			'addresses' => $addresses,
			'educations' => $educations,
			'socialAccounts' => $socialAccounts,
			'skills' => $skills,
			'experiences' => $experiences,
			'connections' => array_values($connections),
			'ORG_name'	=> $main['ORG_name'],
			'ORG_shortName' => $main['ORG_shortName'],
			'ORG_id' => $main['ORG_id']
		];
		
	}	// getFull
	
	/***************************************************************************/
	//
	/***************************************************************************/
  
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @param string $token
	 * @return bool
	 */
	public static
	function handleVerificationToken( WOOOF $wo, $voiceUserId, $emailTo, $token )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		
		$route = 'register/verify?token='.$token;
		
		$fragmentParams = array( 'URL' => $wo->fullURL($route) );
		$fragments = $wo->fetchApplicationFragment('registrationVerificationEmail.php', $fragmentParams );
		
		$emailAddress	= $emailTo;
		$subject		= $fragments['subject'];
		$message		= $fragments['messageText'];
		$replyTo 		= '';
		$cc		 		= '';
		$htmlMessage	= $fragments['messageHTML'];
		$files			= null;
		
		$res = $wo->sendMail('',$emailAddress,$subject,$message,$replyTo,$cc,$htmlMessage,$files);
		
		if ( $res === FALSE ) {
			$wo->logError( self::_ECP."0020 Failed to send registration verification email to [$emailTo]" );
			return FALSE;
		}
		
		return true;
		
	}	// handleVerificationToken
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @return bool
	 */
	public static
	function sendInvitations( WOOOF $wo, $voiceUserId = '' )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		
		$tblInvitations = new WOOOF_dataBaseTable($wo->db, 'voice_user_sent_invitations');
		if($tblInvitations === FALSE) { return false; }
		
		$whereArr = [
			'isDeleted'   => '0',
			'status'	  => 'P'
		];

		if ( $wo->hasContent($voiceUserId) ) {
			$whereArr[ 'voiceUserId' ] = $voiceUserId;
		}

		$res = $tblInvitations->getResult(
			$whereArr,
			'', '', '', '', false, true
		);
		if ( $res === FALSE ) { return false; }
		
		$howMany = 0;
		
		if( $res['totalRows'] !== 0 ) {

			$route = '';
		
			foreach ($tblInvitations->resultRows as $aInvitation) {
				$from = '';
			
				$vPersonRec = $wo->db->getRowByColumn( 'v_voice_persons', 'VUS_id', $aInvitation['voiceUserId'] );
				$from = $vPersonRec['VUS_slug'] . ' ' . $vPersonRec['VUS_username'];
				
				$fragmentParams = array( 
					'URL'    => $wo->fullURL($route),
					'sender' => $from
				);
				$fragments = $wo->fetchApplicationFragment('inviteToVoiceEmail.php', $fragmentParams );
				
				$emailAddress	= $aInvitation['email'];
				$subject		= $fragments['subject'];
				$message		= $fragments['messageText'];
				$replyTo 		= '';
				$cc		 		= '';
				$htmlMessage	= $fragments['messageHTML'];
				$files			= null;
				
				$res = $wo->sendMail('',$emailAddress,$subject,$message,$replyTo,$cc,$htmlMessage,$files);
				
				$invitation = new VO_TblVoiceUserSentInvitations($aInvitation);
				
				if ( $res === FALSE ) {
					$wo->logError( self::_ECP."7519 Failed to send invitation email to [$emailAddress]" );
					$saveRes = self::saveInvitation($wo, $invitation, 'F');
					if($saveRes === FALSE) { return false; }
					return FALSE;
				}
				else {
					$howMany++;
					$saveRes = self::saveInvitation($wo, $invitation, 'S');
					if($saveRes === FALSE) { return false; }
				}
			}
		}
		
		return $howMany;
	
	}	// sendInvitations
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @param [] $emailTo
	 * @return false | int (no of actual invitations saved)
	 */
	public static
	function createInvitationRequests( WOOOF $wo, $emailTo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		
		$howMany = 0;
		
		foreach ($emailTo as $aEmail) {
			// check if email corresponds to an existing VOICE member
			
			$vuRec = $wo->db->getRowByColumn('voice_users', 'username', $aEmail );
			if ( $vuRec === FALSE ) { return FALSE; }
			if ( $vuRec !== NULL and $vuRec['isVerified'] == '1' ) {
				// user already a VOICE member
				continue;
			}
			
			//save invitation to the voice_user_sent_invitations table
			$tblInvitations = new WOOOF_dataBaseTable($wo->db, 'voice_user_sent_invitations');
			if($tblInvitations === FALSE) { return false; }
				
			//check if an invitation is already been sent to this email
			$res = $tblInvitations->getResult(
				[
					'voiceUserId' => $voiceUserId,
					'email'		  => $aEmail,
					'isDeleted'   => '0'
				],
				'', '', '', '', false, true
			);
			if ( $res === FALSE ) { return false; }
				
			if( $res['totalRows'] === 0 ) {
				$invitation = new VO_TblVoiceUserSentInvitations();
				$invitation->voiceUserId = $voiceUserId;
				$invitation->isDeleted = '0';
				$invitation->email = $aEmail;
				$invitation->isAccepted = '0';
					
				$res = self::saveInvitation($wo, $invitation, 'P');
				if ( $res === FALSE ) { return false; }
				
				$howMany++;
			}
			else {
				foreach( $tblInvitations->resultRows as $aInvitation ) {
					$invitation = new VO_TblVoiceUserSentInvitations($aInvitation);
					if($aInvitation['status'] === 'P' || $aInvitation['status'] === 'F')
						$res = self::saveInvitation($wo, $invitation, 'P');
					else {
						continue;
					}
					if ( $res === FALSE ) { return false; }
				}
			}
		}
	
		return $howMany;
	
	}	// createInvitationRequests
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param VO_TblVoiceUserSentInvitations $obj
	 * @return bool
	 */
	
	public static
	function saveInvitation( WOOOF $wo, VO_TblVoiceUserSentInvitations &$obj, $status='P' )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		
		$tblInvitations = new WOOOF_dataBaseTable($wo->db, 'voice_user_sent_invitations');
		if ( !$tblInvitations->constructedOk ) { return false; }
		
		if ( $wo->hasContent($obj->id) ) {
			// update
			$obj->effectiveDate = WOOOF::currentGMTDateTime();
			$obj->status = $status;
			$res = $tblInvitations->updateRowFromArraySimple( $obj->toArray() );
			if ( $res === FALSE ) { return FALSE; }
		}
		else {
			// insert
			$obj->effectiveDate = WOOOF::currentGMTDateTime();
			$obj->status = $status;
			$newId = $tblInvitations->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
		}
	
		return true;
	
	}	// saveInvitation
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param array $in
	 * @return false | id
	 * Returns actually saved $obj 
	 */
	public static 
	function saveMainInfo( WOOOF $wo, $in )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		
		if(!$wo->hasContent($in['voiceUserId'])) {
			$wo->logError(self::_ECP."0011 No value provided for [voiceUserId]");
			return false;
		}
		
		if(!$wo->hasContent($in['firstName'])) {
			$wo->logError(self::_ECP."0012 No value for first name");
			return false;
		}
		
		if(!$wo->hasContent($in['lastName'])) {
			$wo->logError(self::_ECP."0014 No value for last name");
			return false;
		}
		
		$voiceUser = $wo->db->getRowByColumn('voice_users', 'userId', $wo->userData['id']); //fernei olo to row
		if($voiceUser === FALSE) { return false; }
		
		$tblVoiceUser = new VO_TblUser($voiceUser);
		
		$res = self::save($wo, $tblVoiceUser);
		if($res === FALSE) { return false; }
		
		$voiceUserProfile = $wo->db->getRow('person_profiles', $voiceUser['personProfileId']); //fernei olo to row
		if($voiceUserProfile === FALSE) { return false; }
		
		$tblProfile = new VO_TblPersonProfile($voiceUserProfile);
		$tblProfile->firstName = $in['firstName'];
		$tblProfile->lastName = $in['lastName'];
		$tblProfile->middleName = $in['middleName'];
		$tblProfile->birthYear = $in['birthYear'];
		$tblProfile->gender = $in['gender'];
		$tblProfile->personTitleDVId = $in['personTitleDVId'];
		$tblProfile->shortDescription = $in['shortDescription'];
		
		$t2 = new WOOOF_dataBaseTable($wo->db, 'person_profiles');
		
		$tblProfile->cvFile = $t2->handleFileUpload('cvFile', $tblProfile->cvFile);
		if($tblProfile->cvFile === FALSE) { return false; }

		$res2 = VO_Users::savePersonProfile($wo, $tblProfile);
		if($res2 === FALSE) { return false; }
		
		$tblVoiceUser = new VO_TblUser($voiceUser);
		$tblVoiceUser->voiceRolesIds = $in['voiceRolesIds'];
		$tblVoiceUser->oneLiner = $in['VUS_oneLiner'];
		$result = self::save($wo, $tblVoiceUser);
		if($result === FALSE) { return false; }
		
		//save services
		if($wo->hasContent($in['services'])) {
			$in['services'] = explode(',', $in['services']);
		}
		
		$tblUserService = new WOOOF_dataBaseTable($wo->db, 'voice_user_services');
		if($tblUserService === FALSE) { return false; }
			
		//first delete all existing services of user
		$res = $tblUserService->getResult(
			[
				'voiceUserId' => $wo->app->userId,
				'isDeleted' => '0'
			],
			'', '', '', '', false, true
		);
			
		if ( $res === FALSE ) { return false; }
		
		foreach( $tblUserService->resultRows as $aRow ) {
			$res = $tblUserService->deleteRow($aRow['id']);
			if($res === FALSE) { return false; }
		}
		
		//then add the services from the front end
		foreach ($in['services'] as $aService) {
			$obj = new VO_TblVoiceUserServices();
			
			// insert
			$obj->voiceUserId = $wo->app->userId;
			$obj->tagId		  = $aService;
				
			$newId = $tblUserService->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
		}
		
		$t1 = new WOOOF_dataBaseTable($wo->db, 'voice_users');
		$imgRes = $t1->handlePictureUpload('avatarImg', $voiceUser['id']);
		if($imgRes === FALSE) { return false; }
		
		return $res2;
	}	// saveMainInfo
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param $requestorUserId
	 * @return false | [] (no target ids or no rows in the db) | array of users []
	 */
	
	//TODO - RESORTS RESULTS
	public static
	function getUsers( WOOOF $wo, $requestorUserId, $targetIds )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		 
		if ( !$wo->hasContent($requestorUserId) ) {
			$wo->logError(self::_ECP."0471 No value provided for [requestedUserId]" );
			return false;
		}
		
		$users = [];
		$userElems = ['ORG_id', 'VUS_id', 'VUS_createdDateTime', 'VUS_avatarImg', 'VUS_oneLiner', 'ORG_shortName', 'ORG_name', 'PROF_firstName', 'PROF_lastName', 'PROF_birthYear',	'PROF_gender', 'STATS_lastLoginDateTime', 'STATS_noOfLogins', 'STATS_noOfFollowers', 'STATS_noOfFollowings', 'STATS_noOfFriends', 'STATS_noOfTeams', 'STATS_noOfDGs', 'STATS_noOfShares'];
		
		$v_list = new WOOOF_dataBaseTable($wo->db, 'v_voice_persons');
		if ( !$v_list->constructedOk ) { return false; }
		
		if(count($targetIds) === 0) {
			return [];
		}
		
		/////////////-get users based on targetIds-/////////////
		$ids='';
		foreach ($targetIds as $tId)
		{
			if ($ids!='')
			{
				$ids .= ', ';
			}
			$ids .= '\''. $wo->db->escape($tId) .'\'';
		}
		
		$result = $wo->db->query('SELECT * FROM v_voice_persons WHERE VUS_id IN ('. $ids .')');
		if ( $result === FALSE ) { return false; }
		
		if (!$wo->db->getNumRows($result))
		{
			//no error no results
			return 0;
		}
		else 
		{
			//no error results
			while($row = $wo->db->fetchAssoc($result))
			{
				$v_list->resultRows[] = $row;	
			}
		}
		/////////////-END get users based on targetIds-//////////
		
		$ids = [];
		
		foreach($v_list->resultRows as $v_user) {
			$user = [];
			$userId = $v_user['VUS_id'];
			WOOOF_Util::filterOnKeys($user, $userElems, $v_user);
			$user['isType'] = 'PRS';
			$users[$userId] = $user;
		}
		
		//pass the keys from $users to $ids
		$ids = array_keys($users);
		
		for($i=0; $i<sizeof($ids); $i++) {
			$ids[$i] = [$ids[$i], 'PRS'];
		}

		//make the connections array
		$connectionInfoArray = VO_Social::getConnectionInfo($wo, $requestorUserId, $ids);
		if($connectionInfoArray === false) { return false; }

		//merge the users array (with main info) with the connections array
		foreach($users as $aKey => &$aUser) {
			$aUser['connections'] = $connectionInfoArray[$aKey];
		}
		
		//convert the associative array to a simple array to come back to the frontend
		$connections = array_values($users); 
		
		return $connections;
	}	// getUsers
	
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $userId
	 * @param string $requestorUserId	// Optional. Default null. Provide only for getting Connection info as well.
	 * @return false | 
	 */
	
	public static
	function getASingleUser( WOOOF $wo, $userId, $requestorUserId = null )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$userId] [$requestorUserId] " );

		$vRec = $wo->db->getRowByColumn( 'v_voice_persons', 'VUS_id', $userId );
		
		if ( $wo->hasContent($requestorUserId) ) {
			//make the connections array
			$connectionInfoArray = VO_Social::getConnectionInfo($wo, $requestorUserId, [[$userId,'PRS']] );
			if($connectionInfoArray === false) { return false; }
			$vRec['connections'] = $connectionInfoArray[$userId];
		}
		
		return $vRec;
	}	// getASingleUser
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param string $actionCode		// Some domain value code of the USER_ACTION_TYPE domain
	 * @param string $relevantUserId	// Optional, default null
	 * @param string $relevantOrganisationId	// Optional, default null
	 * @param string $infoText			// Optional, default null
	 * @param string $userId			// Optional, default is the currently logged-in user
	 * @param string $relevantGroupId	// Optional, default null
	 * @param string $relevantContentId	// Optional, default null
	 * @param string $relevantIdeaId	// Optional, default null
	 * @param string $relevantPostId	// Optional, default null
	 * @param string $when				// Optional, default null
	 * @return boolean
	 */
	public static
	function saveAction( 
		WOOOF $wo, 
		$actionCode, 
		$relevantUserId=null, 
		$relevantOrganisationId=null, 
		$infoText=null,
		$userId=null,
		$relevantGroupId=null,
		$relevantContentId=null,
		$relevantIdeaId=null,
		$relevantPostId=null,
		$when=null
	) 
	{
		//$place = __CLASS__ . '::' . __FUNCTION__;
		//$wo->debug( "$place:  " );
		
		/*
			done/ok		SDOMVAL_domainValueCode	SDOMVAL_description
			ok2			COC Content Create
			ok2			COE Content Edit
			ok2			IDC Idea Create
			ok2			IDE Idea Edit
						EVC	Evaluate Content
						EVI	Evaluate Idea
			ok2			VIC	View Content
			ok2			VII	View Idea
						
			ok2			DGC	Create Discussion Group
						DGD	Delete Discussion Group
			ok2			DGE	Edit Discussion Group
			ok2			DGJ	Join Discussion Group
			ok2			DGL	Leave Discussion Group
			????		EVU	Evaluate User
			ok2			FO1	Follow Org
			ok2			FO2	Unfollow Org
			ok2			FR1	Request friendship
			ok2			FR2	Accept friendship
			ok2			FR3	Reject friendship
			ok2			FR4	Delete friendship
			ok2			FR5 Delete request friendship
			ok2			FU1	Follow User
			ok2			FU2	Unfollow User
			ok2			LIN	Login
			ok2			LOU	Logout
			ok2			OR1 Edit Organisation
			ok2			PR1	Edit Profile
						PR2	Change Org
			ok2			REG	Registration
			ok2			TE1,2,3: Request (User), Accept (Admin), Reject (Admin)
			ok2			TE4,5,6: Invite (Admin), Accept (User), Reject (User)
			ok2			TE7: Remove from Team (Admin)
			ok2			TEC Create Team
						TED	Delete Team
			ok2			TEE Edit Team
			ok2 fix!	TEJ	Join Team (Result of accepting invitation or request to join)
			ok?			TEL	Leave Team
			ok2			VIO	View Organisation
			ok2			VIU	View User
			ok2			VIG View Group
		 */
		
		if ( !$wo->hasContent($userId) ) {
			$userId = $wo->app->userId;
		}
		
		if ( !$wo->hasContent($actionCode) ) {
			$wo->logError(self::_ECP."0815 No value provided for [actionCode]" );
			return false;
		}
		
		// TODO: Need to validate on DV code and not DV Id 
		/*
		if ( !WOOOF_Domains::validateId($wo, $obj->whatDVId, 'USER_ACTION_TYPE' ) ) {
			return FALSE;
		}
		*/
		
		$obj = new VO_TblUserAction();
		
		$t1 = new WOOOF_dataBaseTable($wo->db, 'voice_user_actions');
		if ( !$t1->constructedOk ) { return false; }
		
		// insert
		$obj->userId			= $userId;
		$obj->whatDVCode		= $actionCode;
		$obj->isConsumedInBadge	= '0';
		$obj->whenDateTime 		= ( $wo->hasContent($when) ? $when : WOOOF::currentGMTDateTime() );
		$obj->relevantUserId	= $relevantUserId;
		$obj->relevantOrganisationId = $relevantOrganisationId;
		$obj->infoText			= $infoText;
		
		$obj->relevantGroupId	= $relevantGroupId;
		$obj->relevantContentId	= $relevantContentId;
		$obj->relevantIdeaId	= $relevantIdeaId;
		$obj->relevantPostId	= $relevantPostId;
			
		$newId = $t1->insertRowFromArraySimple( $obj->toArray() );
		if ( $newId === FALSE ) { return false; }
		$obj->id = $newId;
		
		// Maintain voice_user_stats,
		// updatedDataTime of voice_users
		
		switch ( $actionCode ) {
			case 'PR1': 
				$succ = VO_Users::setUpdatedDateTime($wo, $userId);
				break;
			
			case 'OR1': 
				$succ = VO_Organisations::setUpdatedDateTime($wo, $relevantOrganisationId);
				break;
			
			case 'LIN':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfLogins', '+1' );
				if ( $succ ) {
					$succ = VO_Users::updateStat($wo, $userId, 'lastLoginDateTime', $wo->currentGMTDateTime() );
				}
				break;

			case 'FO1':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfFollowings', '+1' );
				// TODO: update noOfFollowers for org_stats
				break;
			
			case 'FO2':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfFollowings', '-1' );
				// TODO: update noOfFollowers for org_stats
				break;
				
			case 'FU1':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfFollowings', '+1' );
				if ( $succ ) {
					$succ = VO_Users::updateStat($wo, $relevantUserId, 'noOfFollowers', '+1' );
				}			
				break;
			
			case 'FU2':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfFollowings', '-1' );
				if ( $succ ) {
					$succ = VO_Users::updateStat($wo, $relevantUserId, 'noOfFollowers', '-1' );
				}
				break;
				
			case 'FR2':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfFriends', '+1' );
				if ( $succ ) {
					$succ = VO_Users::updateStat($wo, $relevantUserId, 'noOfFriends', '+1' );
				}
				break;
				
			case 'FR4':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfFriends', '-1' );
				if ( $succ ) {
					$succ = VO_Users::updateStat($wo, $relevantUserId, 'noOfFriends', '-1' );
				}
				break;
				
			case 'DGJ':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfDGs', '+1' );
				// TODO: update noOfMembers for group_stats
				break;
				
			case 'DGL':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfDGs', '-1' );
				// TODO: update noOfMembers for group_stats
				break;
				
			case 'TEJ':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfTeams', '+1' );
				// TODO: update noOfMembers for group_stats
				break;
				
			case 'TEL':
				$succ = VO_Users::updateStat($wo, $userId, 'noOfTeams', '-1' );
				// TODO: update noOfMembers for group_stats
				break;
				
			default: $succ = true;
		}	// switch for updating Stats
		if ( $succ === FALSE ) { return FALSE; }

		// Maintain voice_user_notifications
		//
		
		if ( in_array( $actionCode, [ 'EVC', 'VIC' ] ) ) {
			//find the content creator to send the notification
			$contentCreatorRec = $wo->db->getRow('contents', $relevantContentId);
			if ( $contentCreatorRec === FALSE ) { return false; }
		}
		
		if ( in_array( $actionCode, [ 'IDE', 'EVI', 'VII' ] ) ) {
			//find the idea
			$ideaRec = $wo->db->getRow('ideas', $relevantIdeaId);
			if ( $ideaRec === FALSE ) { return false; }
			
			//find the idea's group ownership members to send them the notifications
			$tblIdeaOwnershipGroupMembers = new WOOOF_dataBaseTable($wo->db, 'voice_user_groups');
			if(!$tblIdeaOwnershipGroupMembers->constructedOk) { return false; }
				
			$ideaOwners = $tblIdeaOwnershipGroupMembers->getResult(
				[
					'groupId'   => $ideaRec['ownersGroupId'],
					'isDeleted' => '0',
					'isActive'  => '1'
				],
				'fromDate desc', '', '', '', true, false
			);
			if ( $ideaOwners === FALSE ) { return false; }
		}
		
		if ( in_array( $actionCode, [ 'TE1', 'TE5', 'TE6' ] ) ) {
			//find the group admins to send them the notifications
			$tblVoiceUserGroups = new WOOOF_dataBaseTable($wo->db, 'voice_user_groups');
			if(!$tblVoiceUserGroups->constructedOk) { return false; }
			
			$groupAdmins = $tblVoiceUserGroups->getResult(
				[
					'groupId'   => $relevantGroupId,
					'isDeleted' => '0',
					'isActive'  => '1',
					'isAdmin'   => '1'
				],
				'fromDate desc', '', '', '', true, false
			);
			if ( $groupAdmins === FALSE ) { return false; }
		}
				
		if ( in_array( $actionCode, [ 'OR1', 'OR2' ] ) ) {
			//find the org admins to send them the notifications
			$tblVoiceUsers = new WOOOF_dataBaseTable($wo->db, 'voice_users');
			if(!$tblVoiceUsers->constructedOk) { return false; }
			
			$orgAdmins = $tblVoiceUsers->getResult(
				[
					'organisationId'       => $relevantOrganisationId,
					'isDeleted'            => '0',
					'isActive'	           => '1',
					'isOrganisationAdmin'  => '1'
				],
				'createdDateTime desc', '', '', '', true, false
			);
			if ( $orgAdmins === FALSE ) { return false; }
		}
				
		switch ( $actionCode ) {
			//for social actions
			case 'FR1':	 // OK	// this is also covered by the voice_user_friend_requests table
				$succ = VO_Users::addNotification($wo, $actionCode,
						$userId, null, ' You have been sent a friend request by ', $relevantUserId);
				break;
			case 'FR2': // OK
				$succ = VO_Users::addNotification($wo, $actionCode,
						$userId, null, ' Your friend request was accepted by ', $relevantUserId);
				break;
			case 'FR3': // OK
				$succ = VO_Users::addNotification($wo, $actionCode,
						$userId, null, ' Your friend request was rejected by ', $relevantUserId);
				break;
			case 'FR4': // OK
				$succ = VO_Users::addNotification($wo, $actionCode,
						$userId, null, ' Your friendship was deleted by ', $relevantUserId);
				break;
			case 'FR5': // ???? ----> has no meaning to have notification at all means
				$succ = VO_Users::addNotification($wo, $actionCode,
						$userId, null, null, $relevantUserId);
				break;
			case 'FU1': // OK
				$succ = VO_Users::addNotification($wo, $actionCode,
						$userId, null, ' You have been followed by ', $relevantUserId);
				break;
			case 'FU2': // OK
				$succ = VO_Users::addNotification($wo, $actionCode, 
					$userId, null, ' You have been unfollowed by ', $relevantUserId);
				break;
				
			//for evaluations
			case 'EVC':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' Your content was evaluated by ', $relevantUserId, null,
				$relevantContentId);
				break;
			case 'EVI':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' Your idea was evaluated by ', $relevantUserId, null,
				null, $relevantIdeaId);
				break;
			case 'EVP':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' Your post was evaluated by ', $relevantUserId, null,
				null, null, $relevantPostId);
				break;
			case 'EVU':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' You were evaluated by ', $relevantUserId);
				break;
				
			//for posts
			case 'POA':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' Your own post has been answered to by ', $relevantUserId, null,
				null, null, $relevantPostId);
				break;
			case 'POD':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' New post in one of your discussion groups by ', $relevantUserId, $relevantGroupId,
				null, null, $relevantPostId);
				break;
			case 'POO':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' Your own post box received a post by ', $relevantUserId, null,
				null, null, $relevantPostId);
				break;
			case 'POR':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' You are referenced in a new post by ', $relevantUserId, null,
				null, null, $relevantPostId);
				break;
			case 'POT':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' New Post in one of your teams by ', $relevantUserId, $relevantGroupId,
				null, null, $relevantPostId);
				break;
				
			//as a team admin
			case 'TE1': // -> OK
				if( $groupAdmins['totalRows'] !== 0 ) {
					foreach ($tblVoiceUserGroups->resultRows as $aGroupAdmin) {
						$succ = VO_Users::addNotification($wo, $actionCode,
								$userId, null, ' A request has been submitted by ', $aGroupAdmin['voiceUserId'], $relevantGroupId);
					}
				}
				break;
			case 'TE5': // OK
				if( $groupAdmins['totalRows'] !== 0 ) {
					foreach ($tblVoiceUserGroups->resultRows as $aGroupAdmin) {
						$succ = VO_Users::addNotification($wo, $actionCode,
								$userId, null, ' Your invitation has been accepted by ', $aGroupAdmin['voiceUserId'], $relevantGroupId);
					}
				}
				break;
			case 'TE6': // OK
				if( $groupAdmins['totalRows'] !== 0 ) {
					foreach ($tblVoiceUserGroups->resultRows as $aGroupAdmin) {
						$succ = VO_Users::addNotification($wo, $actionCode,
								$userId, null, ' Your invitation has been rejected by ', $aGroupAdmin['voiceUserId'], $relevantGroupId);
					}
				}
				break;
				
			//as a team member candidate
			case 'TE2': // OK
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' Your join request was accepted by ', $relevantUserId, $relevantGroupId);
				break;
			case 'TE3': // OK
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' Your join request was rejected by ', $relevantUserId, $relevantGroupId);
				break;
			case 'TE4': // OK
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' An invitation was received by ', $relevantUserId, $relevantGroupId);
				break;
				
			//as a team member
			case 'TE7': // OK
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' You have been removed by ', $relevantUserId, $relevantGroupId);
				break;
				
			//as an organisation admin
			case 'OR1': // OK
				if( $orgAdmins['totalRows'] !== 0 ) {
					foreach ($tblVoiceUsers->resultRows as $anAdmin) {
						$succ = VO_Users::addNotification($wo, $actionCode,
						$userId, $relevantOrganisationId, ' Your organisation was edited by ', $anAdmin['id']);
					}
				}
				break;
			case 'OR2':
				if( $orgAdmins['totalRows'] !== 0 ) {
					foreach ($tblVoiceUsers->resultRows as $anAdmin) {
						$succ = VO_Users::addNotification($wo, $actionCode,
						$userId, $relevantOrganisationId, ' Your organisation was used by the new registered user ', $anAdmin['id']);
					}
				}
				break;
				
			//for idea edit
			case 'IDE':
				if($ideaOwners['totalRows'] !== 0) {
					foreach ($tblIdeaOwnershipGroupMembers->resultRows as $aMember) {
						$succ = VO_Users::addNotification($wo, $actionCode,
								$userId, null, ' Your idea was edited by ', $aMember['voiceUserId'], null,
								null, $relevantIdeaId);
					}
				}
				break;
				
			//for views
			case 'VIC':
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' Your content was viewed by ', $contentCreatorRec['createdByUserId'], null,
				$relevantContentId);
				break;
			case 'VII':
				if($ideaOwners['totalRows'] !== 0) {
					foreach ($tblIdeaOwnershipGroupMembers->resultRows as $aMember) {
						$succ = VO_Users::addNotification($wo, $actionCode,
								$userId, null, ' Your idea was viewed by ', $aMember['voiceUserId'], null,
								null, $relevantIdeaId);
					}
				}
				break;
			/*case 'VIO': // OK
				if( $orgAdmins['totalRows'] !== 0 ) {
					foreach ($tblVoiceUsers->resultRows as $anAdmin) {
						$succ = VO_Users::addNotification($wo, $actionCode,
								$userId, $relevantOrganisationId, ' Your organisation was viewed by ', $anAdmin['id']);
					}
				}
				break;*/
			case 'VIU': // OK
				$succ = VO_Users::addNotification($wo, $actionCode,
				$userId, null, ' You were viewed by ', $relevantUserId);
				break;
			// TODO: add all remaining cases. The action code might be different ...
			
			default: $succ = true;
		}	// switch for adding notifications
		if ( $succ === FALSE ) { return FALSE; }
		
		return $obj->id;
	}	// saveAction
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function updateStat( 
		WOOOF $wo,
		$userId,
		$statName,
		$value,
		$when=null
	) 
	{
		//$place = __CLASS__ . '::' . __FUNCTION__;
		//$wo->debug( "$place:  " );
		
		$when = $wo->myNVL( $when, $wo->currentGMTDateTime() );
		
		$sql = "update voice_user_stats set validForDateTime = '$when', `$statName` = ";
		
		if ( $value == '+1' ) {
			$newValueString = "`$statName` + 1";
		}
		elseif ( $value == '-1' ) {
			$newValueString = "`$statName` - 1";
		}
		else {
			$newValueString = "'$value'"; 
		}
		
		$sql .= $newValueString . " where userId = '$userId'";
		
		$succ = $wo->db->query( $sql );
		if ( $succ === FALSE ) { return FALSE; }
		
		if ( $wo->db->affectedRows == 0 ) {
			// Need to insert
			//
			$succ = self::calcStatsForUser($wo, $userId);
			if ( $succ === FALSE ) { return FALSE; }
		}	// no row updated. Need to insert
		
		return true;
	}	// updateStat
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function calcStatsForUser( 
		WOOOF $wo,
		$userId
	) 
	{
		//$place = __CLASS__ . '::' . __FUNCTION__;
		//$wo->debug( "$place:  " );

		$when = $wo->currentGMTDateTime();
		
		$vals = [];
		
		//`lastLoginDateTime`, `noOfLogins`,
		$sql = "select max(whenDateTime) a1, count(*) a2 from voice_user_actions where userId = '$userId' and whatDVCode='LIN'";
		$succ = $wo->db->getResultByQuery( $sql, true, false );
		if ( $succ === FALSE ) { return FALSE; }
		$vals['lastLoginDateTime']	= $wo->db->resultRows[0]['a1'];
		$vals['noOfLogins']			= $wo->db->resultRows[0]['a2'];
		
		//`noOfPosts`,
		$sql = "select count(*) a1 from posts where userId = '$userId'";
		$succ = $wo->db->getResultByQuery( $sql, true, false );
		if ( $succ === FALSE ) { return FALSE; }
		$vals['noOfPosts']	= $wo->db->resultRows[0]['a1'];
		
		//`noOfFollowers`,
		$sql = "select count(*) a1 from voice_user_followings where thisId = '$userId' and targetType = 'PRS'";
		$succ = $wo->db->getResultByQuery( $sql, true, false );
		if ( $succ === FALSE ) { return FALSE; }
		$vals['noOfFollowers']	= $wo->db->resultRows[0]['a1'];
		
		//`noOfFollowings`,
		$sql = "select count(*) a1 from voice_user_followings where followsId = '$userId' /*and targetType = 'PRS'*/";
		$succ = $wo->db->getResultByQuery( $sql, true, false );
		if ( $succ === FALSE ) { return FALSE; }
		$vals['noOfFollowings']	= $wo->db->resultRows[0]['a1'];
		
		//`noOfPeers`, // difficult to maintain
		/*
		$sql = "select count(*) a1 from voice_user_followings where thisId = '$userId' and targetType = 'PRS' and isPeer = '1'";
		$succ = $wo->db->getResultByQuery( $sql, true, false );
		if ( $succ === FALSE ) { return FALSE; }
		$vals['noOfPeers']	= $wo->db->resultRows[0]['a1'];
		*/
		
		//`noOfFriends`,
		$sql = "select count(*) a1 from voice_user_friendships where thisId = '$userId' or isFriendsWithId = '$userId'";
		$succ = $wo->db->getResultByQuery( $sql, true, false );
		if ( $succ === FALSE ) { return FALSE; }
		$vals['noOfFriends'] = $wo->db->resultRows[0]['a1'];
		
		//`noOfTeams`,
		$sql = "select count(*) a1 from voice_user_groups vug, groups g
		where vug.voiceUserId = '$userId' and vug.isActive = '1' and g.id = vug.groupId and g.groupType = 'TEA'";
		$succ = $wo->db->getResultByQuery( $sql, true, false );
		if ( $succ === FALSE ) { return FALSE; }
		$vals['noOfTeams']	= $wo->db->resultRows[0]['a1'];
		
		//`noOfDGs`,
		$sql = "select count(*) a1 from voice_user_groups vug, groups g
		where vug.voiceUserId = '$userId' and vug.isActive = '1' and g.id = vug.groupId and g.groupType = 'DIS'";
		$succ = $wo->db->getResultByQuery( $sql, true, false );
		if ( $succ === FALSE ) { return FALSE; }
		$vals['noOfDGs']	=  $wo->db->resultRows[0]['a1'];
		
		//`noOfShares`,
		// TODO: ...
		$vals['noOfShares'] = 0;

		// var_dump($vals);
		
		$sql = "delete from voice_user_stats where userId = '$userId'";
		$succ = $wo->db->query($sql);
		if ( $succ === FALSE ) { return FALSE; }
		
		$newId = $wo->db->getNewId('voice_user_stats');
		$sql = "
			insert into voice_user_stats (
				`id`, `isDeleted`, `userId`, 
				`lastLoginDateTime`, `noOfLogins`, `noOfPosts`, 
				`noOfFollowers`, `noOfFollowings`, `noOfFriends`,
				`noOfTeams`, `noOfDGs`, 
				`noOfShares`, 
				`validForDateTime` 
			)
			values(
				'$newId', '0', '$userId',
				'{$vals['lastLoginDateTime']}', {$vals['noOfLogins']}, {$vals['noOfPosts']}, 
				{$vals['noOfFollowers']}, {$vals['noOfFollowings']}, {$vals['noOfFriends']}, 
				{$vals['noOfTeams']}, {$vals['noOfDGs']}, 
				{$vals['noOfShares']}, 
				'$when'
			)
		";

		$succ = $wo->db->query($sql);
		if ( $succ === FALSE ) { return FALSE; }

		return true;
	}	// calcStatsForUser
	
		
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function search( WOOOF $wo, $input, $matchMode='STD', $data='FULL', $maxRows=300 )
	{
		// TODO: based on _load_organisations. Need to clear this up!!
	
		$maxRows = (int) $maxRows;
	
		$searchFT = VO_Various::formBooleanSearchString( $wo, $input );
			
		$sql =  "select VUS_id, ORG_name, VUS_avatarImg, PROF_firstName, PROF_lastName ";
		$sql .=	"from v_voice_persons ";
		$sql .= "where match(PROF_firstName, PROF_lastName) against('{$searchFT}' IN BOOLEAN MODE) and VUS_isDeleted='0' and VUS_isActive='1' ";
		$sql .= "order by PROF_lastName, PROF_firstName ";
		$sql .= "limit $maxRows";
	
		$res = $wo->db->getResultByQuery($sql, true, false);
		if ( $res === FALSE ) { return FALSE; }
	
		$res = $wo->db->resultRows;
	
		$out = [];
		foreach( $res as $aRes ) {
			$out[] = [
				'value' => $aRes['VUS_id'],
				'label' => $aRes['PROF_firstName'] . ' ' . $aRes['PROF_lastName'] . ' - ' . $aRes['ORG_name'],
				'avatarImg' => $aRes['VUS_avatarImg']
			];
		}
	
		return $out;
	}	// search
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param VO_TblUser $obj
	 * @param bool $fetchBack
	 * @return false |  the set DateTime
	 */
	public static
	function setUpdatedDateTime( WOOOF $wo, $id, $toDateTime = '' )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		
		if ( !$wo->hasContent($toDateTime) ) {
			$toDateTime = WOOOF::currentGMTDateTime();
		}
		
		$res = $wo->db->query(
			"update voice_users set updatedDateTime = '$toDateTime' where id = '$id' "
		);
		
		if ( $res === FALSE ) { return FALSE; }

		return $toDateTime;
	}	// setUpdatedDateTime
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $voiceUserId
	 * @return false | user activities
	 */
	public static
	function getActivityLog( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		$tblVoiceUserActions = new WOOOF_dataBaseTable($wo->db, 'v_user_actions');
		if(!$tblVoiceUserActions->constructedOk) { return false; }
		
		$res = $tblVoiceUserActions->getResult(
			[
				'VUS_id' 		  => $voiceUserId,
				'VUS_isDeleted'   => '0',
				'VUS_isActive'	  => '1',
				'VUA_isDeleted'   => '0'
			],
			'VUA_whenDateTime desc', '', '', '', true, false
		);
		
		if ( $res === FALSE ) { return false; }
		
		$activities = [];
		$activityElems = ['VUS_id', 'VUS_avatarImg', 'VUA_id', 'VUA_userId', 'VUA_whenDateTime', 
			'VUA_relevantUserId', 'VUA_relevantOrganisationId', 'VUA_infoText', 
			'VUA_whatDVCode', 'VDV_SDOMVAL_description', 'RELUS_id', 
			'RELUS_username', 'RELUS_avatarImg', 'RELUS_slug', 'RELOR_id', 
			'RELOR_name', 'RELOR_logoImage', 'RELGR_id', 'RELGR_title', 
			'RELGR_groupType', 'RELGR_avatarImg', 'RELPO_id', 'RELPO_title',
			'RELCN_id', 'RELCN_title', 'RELCN_titleImg',
			'RELID_id', 'RELID_title', 'RELID_titleImg'
		];
		if( $res['totalRows'] !== 0 ) {
			foreach ($tblVoiceUserActions->resultRows as $anAction) {
				$activity = [];
				WOOOF_Util::filterOnKeys($activity, $activityElems, $anAction);
				
				//logout actions dont go in the activity log
				if($anAction['VUA_whatDVCode'] === 'LOU') {
					$activity['isType'] = 'LOU';
					continue;
				}
				
				/*
					COC Content Create
					COE Content Edit
					IDC Idea Create
					IDE Idea Edit
					EVC	Evaluate Content
					EVI	Evaluate Idea
					VIC	View Content
					VII	View Idea 
				 */
				
				//ideas
				if(in_array($anAction['VUA_whatDVCode'], ['IDC', 'IDE', 'VII', 'EVI'])) {
					$activity['targetName'] = $activity['RELID_title'];
					$activity['isType'] = 'IDE';
				}
				
				//contents
				else if(in_array($anAction['VUA_whatDVCode'], ['COC', 'COE', 'VIC', 'EVC'])) {
					$activity['targetName'] = $activity['RELCN_title'];
					$activity['isType'] = 'CNT';
				}
				
				//discussion groups and team groups
				else if($anAction['VUA_whatDVCode'] === 'DGC' || $anAction['VUA_whatDVCode'] === 'TEC' 
						|| $anAction['VUA_whatDVCode'] === 'DGJ' || $anAction['VUA_whatDVCode'] === 'DGL' 
						|| $anAction['VUA_whatDVCode'] === 'TEJ' || $anAction['VUA_whatDVCode'] === 'TEL'
						|| $anAction['VUA_whatDVCode'] === 'DGE' || $anAction['VUA_whatDVCode'] === 'TEE'
						|| $anAction['VUA_whatDVCode'] === 'VIG') {
					$activity['targetName'] = $activity['RELGR_title'];
					$activity['isType'] = 'GRO';
				}
				
				//request join group
				else if(in_array($anAction['VUA_whatDVCode'], ['TE1', 'TE2', 'TE3' ,'TE4', 'TE5', 'TE6', 'TE7'])) {
					$activity['targetName'] = $activity['RELGR_title'];
					$activity['isType'] = 'GRO';
				}
				
				//organisations
				else if($anAction['VUA_whatDVCode'] === 'VIO' || $anAction['VUA_whatDVCode'] === 'FO1'
						|| $anAction['VUA_whatDVCode'] === 'FO2' || $anAction['VUA_whatDVCode'] === 'OR1'
						|| $anAction['VUA_whatDVCode'] === 'OR2') {
					$activity['targetName'] = $activity['RELOR_name'];
					$activity['isType'] = 'ORG';
				}
				
				//registration
				else if($anAction['VUA_whatDVCode'] === 'REG') {
					$activity['targetName'] = $activity['VDV_SDOMVAL_description'];
					$activity['isType'] = 'LIN';
				}
				
				//edit profile
				else if($anAction['VUA_whatDVCode'] === 'PR1') {
					$activity['targetName'] = $activity['VDV_SDOMVAL_description'];
					$activity['isType'] = 'LIN';
				}
				
				//login
				else if($anAction['VUA_whatDVCode'] === 'LIN') {
					$activity['targetName'] = $activity['VDV_SDOMVAL_description'];
					$activity['isType'] = 'LIN';
				}
				
				//anything else
				else {
					$targetName = $wo->db->getRowByColumn('v_voice_persons', 'VUS_id', $activity['VUA_relevantUserId']);
					$activity['targetName'] = ' ' . $activity['RELUS_slug'] . ' | ' . $targetName['ORG_name'];
					$activity['isType'] = 'PRS';
				}
				
				$activities[] = $activity;
			}
		}
		else {
			$activities = [];
		}
	
		return $activities;
	}	// getActivityLog
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $voiceUserId
	 * @return false | user notifications
	 */
	public static
	function getNotifications( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		$tblVoiceUserNotifications = new WOOOF_dataBaseTable($wo->db, 'v_user_notifications');
		if(!$tblVoiceUserNotifications->constructedOk) { return false; }
	
		$res = $tblVoiceUserNotifications->getResult(
			[
				'VUN_userId'    => $voiceUserId,
				'VUN_isDeleted' => '0'
				//'VUN_whenDateTime>' => $wo->currentGMTDateTimeAndXSeconds(-2764800)
				//'isSeen'	=> '0' -> MUST HAVE isSeen inside the view by my opinion
			],
			'VUN_whenDateTime desc', '', '', '', true, false
		);
		if ( $res === FALSE ) { return false; }
	
		$notifications = [];
		$notificationElems = [
			'VUN_userId', 'VUN_whenDateTime', 'VUN_relevantUserId', 'VUN_relevantOrganisationId',
			'VUN_infoText', 'VUN_whatDVCode', 'VDV_SDOMVAL_description', 'RELUS_id', 'RELUS_avatarImg',
			'RELUS_slug', 'RELOR_id', 'RELOR_name', 'RELOR_logoImage', 'RELGR_id', 'RELGR_title', 'RELGR_groupType',
			'RELGR_avatarImg', 'RELPO_id', 'RELPO_title',
			'RELCN_id', 'RELCN_title', 'RELCN_titleImg',
			'RELID_id', 'RELID_title', 'RELID_titleImg'
		]; //some elems missing
		
		if( $res['totalRows'] !== 0 ) {
			foreach ($tblVoiceUserNotifications->resultRows as $aNotification) {
				$notification = [];
				WOOOF_Util::filterOnKeys($notification, $notificationElems, $aNotification);
				
				//ideas
				if(in_array($aNotification['VUN_whatDVCode'], ['VII', 'IDE', 'EVI'])) {
					$notification['actionFromName'] = $notification['RELID_title'];
					$notification['isType'] = 'IDE';
				}
				
				//contents
				if(in_array($aNotification['VUN_whatDVCode'], ['VIC', 'EVC'])) {
					$notification['actionFromName'] = $notification['RELCN_title'];
					$notification['isType'] = 'CNT';
				}
				
				//posts
				if(in_array($aNotification['VUN_whatDVCode'], ['POA', 'POD', 'POO', 'POR', 'POT'])) {
					$notification['actionFromName'] = $notification['RELPO_title'];
					$notification['isType'] = 'POS';
				}

				//groups
				else if(in_array($aNotification['VUN_whatDVCode'], ['TE2', 'TE3' ,'TE4', 'TE5', 'TE6', 'TE7'])) {
					$notification['actionFromName'] = $notification['RELGR_title'];
					$actionFromName = $wo->db->getRowByColumn('v_voice_persons', 'VUS_id', $notification['VUN_relevantUserId']);
					$notification['userInfo'] = ' ' . $notification['RELUS_slug'] . ' | ' . $actionFromName['ORG_name'];
					$notification['isType'] = 'GRO1';
				}
				
				else if($aNotification['VUN_whatDVCode'] === 'TE1') {
					$notification['actionFromName'] = $notification['RELGR_title'];
					$actionFromName = $wo->db->getRowByColumn('v_voice_persons', 'VUS_id', $notification['VUN_relevantUserId']);
					$notification['userInfo'] = ' ' . $notification['RELUS_slug'] . ' | ' . $actionFromName['ORG_name'];
					$notification['isType'] = 'GRO2';
				}

				//organisations
				else if(in_array($aNotification['VUN_whatDVCode'], ['OR1', 'OR2'])) {
					$notification['actionFromName'] = $notification['RELOR_name'];
					$notification['isType'] = 'ORG';
				}

				//anything else - views & social actions
				else {
					$actionFromName = $wo->db->getRowByColumn('v_voice_persons', 'VUS_id', $notification['VUN_relevantUserId']);
					$notification['actionFromName'] = ' ' . $notification['RELUS_slug'] . ' | ' . $actionFromName['ORG_name'];
					$notification['isType'] = 'PRS';
				}

				$notifications[] = $notification;
			}
		}
		else {
			$notifications = [];
		}
	
		return $notifications;
	}	// getNotifications
	

	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param string $actionCode		// Some domain value code of the USER_ACTION_TYPE domain
	 * @param string $relevantUserId	// Optional, default null
	 * @param string $relevantOrganisationId	// Optional, default null
	 * @param string $infoText			// Optional, default null
	 * @param string $userId			// Optional, default is the currently logged-in user
	 * @param string $relevantGroupId	// Optional, default null
	 * @param string $relevantContentId	// Optional, default null
	 * @param string $relevantIdeaId	// Optional, default null
	 * @param string $relevantPostId	// Optional, default null
	 * @param string $when				// Optional, default null
	 * @return boolean
	 */
	public static
	function addNotification(
			WOOOF $wo,
			$actionCode,
			$relevantUserId=null,
			$relevantOrganisationId=null,
			$infoText=null,
			$userId=null,
			$relevantGroupId=null,
			$relevantContentId=null,
			$relevantIdeaId=null,
			$relevantPostId=null,
			$when=null
	)
	{
		//$place = __CLASS__ . '::' . __FUNCTION__;
		//$wo->debug( "$place:  " );
	
		/*
		 done/ok		SDOMVAL_domainValueCode	SDOMVAL_description
							You / Your
						EVC	Content was Evaluated
						EVI	Idea was Evaluated
						EVP Post was Evaluated
		???				EVU	were Evaluated
						
						
						FR1	Have been sent a Friendship Request
						FR2	Friendship Request was Accepted
		hide			FR3	Friendship Request was Rejected
		hide			FR4	Friendship deleted
		hide			FR5	Friendship Request was Deleted
						
						FU1	have been Followed
						FU2	have been Unfollowed
						
						POA own post has been answered to
						POD a new post in one of your DGs  
						POO own Post Box received a Post
						POR are referenced in a new Post
						POT a new post in one of your Teams
						
						As a Team Admin
						TE1	A request for your Team has been submitted
						TE5,6 An invitation you sent has been accepted / rejected
						TE7: Remove from Team (Admin)

						As a candidate Team member
						TE4	An invitation was received
						TE2,3	request was Accepted/Rejected
						
						OR1 organisation (you are an admin) was edited by someone else
						OR2 organisation (you are an admin) was used by a new registered user
						
						VIC	Content was Viewed 
						VII	Idea was Viewed 
		hide			VIO	Organisation was viewed
						VIU	were Viewed
		 */
	
		if ( !$wo->hasContent($userId) ) {
			$userId = $wo->app->userId;
		}
	
		if ( !$wo->hasContent($actionCode) ) {
			$wo->logError(self::_ECP."0815 No value provided for [actionCode]" );
			return false;
		}
		
		// TODO: Need to validate on DV code and not DV Id 
		/*
		if ( !WOOOF_Domains::validateId($wo, $obj->whatDVId, 'USER_ACTION_TYPE' ) ) {
			return FALSE;
		}
		*/
		
		$obj = new VO_TblUserNotification();
		
		$t1 = new WOOOF_dataBaseTable($wo->db, 'voice_user_notifications');
		if ( !$t1->constructedOk ) { return false; }
		
		// insert
		$obj->userId			= $userId;
		$obj->whatDVCode		= $actionCode;
		$obj->isSeen			= '0';
		$obj->whenDateTime 		= ( $wo->hasContent($when) ? $when : WOOOF::currentGMTDateTime() );
		$obj->relevantUserId	= $relevantUserId;
		$obj->relevantOrganisationId = $relevantOrganisationId;
		$obj->infoText			= $infoText;
		
		$obj->relevantGroupId	= $relevantGroupId;
		$obj->relevantContentId	= $relevantContentId;
		$obj->relevantIdeaId	= $relevantIdeaId;
		$obj->relevantPostId	= $relevantPostId;
		
		// usedInDigest ??
		
		$newId = $t1->insertRowFromArraySimple( $obj->toArray() );
		if ( $newId === FALSE ) { return false; }
		$obj->id = $newId;
		
		return $newId;
			
	}	// addNotification
	
}	// VO_Users