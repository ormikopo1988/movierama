<?php

class VO_Users {
	const _ECP = 'USE';	// Error Code Prefix
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
  
	/**
	 * 
	 * @param WOOOF $wo
	 * @param VO_TblUser $obj
	 * @param bool $fetchBack
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static 
	function save( WOOOF $wo, VO_TblUser &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	    
		$t1 = new WOOOF_dataBaseTable($wo->db, 'voice_users');
		if ( !$t1->constructedOk ) { return false; }
		
		if ( !$wo->hasContent($obj->userId) ) {
			$wo->logError(self::_ECP."0010 No value provided for [userId]" );
			return false;
		}
		
		if ( $wo->hasContent($obj->id) ) {
			// update
			$res = $t1->updateRowFromArraySimple( $obj->toArray() );
			if ( $res === FALSE ) { return FALSE; }
		}
		else {
			// insert
			$verificationToken		= WOOOF::randomString(255);
			 
			$obj->isDeleted			= '0';
			$obj->isActive			= '1';
			$obj->isVerified		= '0';
			$obj->verificationToken = $verificationToken;
			$obj->createdDateTime 	= WOOOF::currentGMTDateTime();
			$obj->updatedDateTime	= $obj->createdDateTime;
			
			$newId = $t1->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
			
			$succ = self::handleVerificationToken($wo, $obj->id, $obj->username, $verificationToken );
			if ( $succ === FALSE ) { return FALSE; }
		}

		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
	  
		return $obj->id;
	}	// save
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @return false | array[ ]
	 */
	public static
	function getFull( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  $voiceUserId" );
		 
		if(!$wo->hasContent($voiceUserId)) {
			$wo->logError(self::_ECP."0011 No value provided for [voiceUserId]");
			return false;
		}
		
		$main = VO_ProfileData::getMainInfo($wo, $voiceUserId);
		if($main === FALSE) { return false; }
		$addresses = VO_ProfileData::getAddressesInfo($wo, $voiceUserId);
		if($addresses === FALSE) { return false; }
		$educations = VO_ProfileData::getEducationInfo($wo, $voiceUserId);
		if($educations === FALSE) { return false; }
		$socialAccounts = VO_ProfileData::getSocialAccounts($wo, $voiceUserId);
		if($socialAccounts === FALSE) { return false; }
		$skills = VO_ProfileData::getSkills($wo, $voiceUserId);
		if($skills === FALSE) { return false; }
		$experiences = VO_ProfileData::getExperiences($wo, $voiceUserId);
		if($experiences === FALSE) { return false; }
		$connections = VO_Social::getConnectionInfo($wo, $wo->app->userId, [$voiceUserId]);
		if($connections === FALSE) { return false; }
		
		$voicePersonMainView = $wo->db->getRowByColumn('v_voice_persons', 'VUS_id', $voiceUserId); //fernei olo to row
		if ( $voicePersonMainView === FALSE ) { return false; }
			
		return [
			'main' => $main,
			'addresses' => $addresses,
			'educations' => $educations,
			'socialAccounts' => $socialAccounts,
			'skills' => $skills,
			'experiences' => $experiences,
			'connections' => array_values($connections),
			'ORG_shortName' => $voicePersonMainView['ORG_shortName'],
			'ORG_id' => $voicePersonMainView['ORG_id']
		];
		
	}	// getFull
	
	/***************************************************************************/
	//
	/***************************************************************************/
  
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @param string $token
	 * @return bool
	 */
	public static
	function handleVerificationToken( WOOOF $wo, $voiceUserId, $emailTo, $token )
	{
		return true;	// for testing only!!!
		
		$place = __CLASS__ . '::' . __FUNCTION__;
		
		$route = 'register/verify?token='.$token;
		
		$fragmentParams = array( 'URL' => $wo->fullURL($route) );
		$fragments = $wo->fetchApplicationFragment('registrationVerificationEmail.php', $fragmentParams );
		
		$emailAddress	= $emailTo;
		$subject		= $fragments['subject'];
		$message		= $fragments['messageText'];
		$replyTo 		= '';
		$cc		 		= '';
		$htmlMessage	= $fragments['messageHTML'];
		$files			= null;
		
		$res = $wo->sendMail('',$emailAddress,$subject,$message,$replyTo,$cc,$htmlMessage,$files);
		
		if ( $res === FALSE ) {
			$wo->logError( self::_ECP."0020 Failed to send registration verification email to [$emailTo]" );
			return FALSE;
		}
		
		return true;
		
	}	// handleVerificationToken
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param array $in
	 * @return false | id
	 * Returns actually saved $obj 
	 */
	public static 
	function saveMainInfo( WOOOF $wo, $in )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		
		if(!$wo->hasContent($in['voiceUserId'])) {
			$wo->logError(self::_ECP."0011 No value provided for [voiceUserId]");
			return false;
		}
		
		if(!$wo->hasContent($in['firstName'])) {
			$wo->logError(self::_ECP."0012 No value for first name");
			return false;
		}
		
		if(!$wo->hasContent($in['lastName'])) {
			$wo->logError(self::_ECP."0014 No value for last name");
			return false;
		}

		$voiceUser = $wo->db->getRowByColumn('voice_users', 'userId', $wo->userData['id']); //fernei olo to row
		if($voiceUser === FALSE) { return false; }
		
		$tblVoiceUser = new VO_TblUser($voiceUser);
		
		$res = self::save($wo, $tblVoiceUser);
		if($res === FALSE) { return false; }
		
		$voiceUserProfile = $wo->db->getRow('person_profiles', $voiceUser['personProfileId']); //fernei olo to row
		if($voiceUserProfile === FALSE) { return false; }
		
		$tblProfile = new VO_TblPersonProfile($voiceUserProfile);
		$tblProfile->firstName = $in['firstName'];
		$tblProfile->lastName = $in['lastName'];
		$tblProfile->middleName = $in['middleName'];
		$tblProfile->birthYear = $in['birthYear'];
		$tblProfile->gender = $in['gender'];
		$tblProfile->personTitleDVId = $in['personTitleDVId'];
		$tblProfile->shortDescription = $in['shortDescription'];
		
		$t2 = new WOOOF_dataBaseTable($wo->db, 'person_profiles');
		
		$tblProfile->cvFile = $t2->handleFileUpload('cvFile', $tblProfile->cvFile);
		if($tblProfile->cvFile === FALSE) { return false; }

		$res2 = VO_PersonProfiles::save($wo, $tblProfile);
		if($res2 === FALSE) { return false; }
		
		$t1 = new WOOOF_dataBaseTable($wo->db, 'voice_users');
		$imgRes = $t1->handlePictureUpload('avatarImg', $voiceUser['id']);
		if($imgRes === FALSE) { return false; }
		
		return $res2;
	}	// saveMainInfo
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param $requestorUserId
	 * @return false | array of users []
	 */
	public static
	function getUsers( WOOOF $wo, $requestorUserId, $targetIds = [] )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		 
		if ( !$wo->hasContent($requestorUserId) ) {
			$wo->logError(self::_ECP."0471 No value provided for [requestedUserId]" );
			return false;
		}
		
		$users = [];
		$userElems = ['ORG_id', 'VUS_id', 'VUS_createdDateTime', 'VUS_avatarImg', 'ORG_shortName', 'PROF_firstName', 'PROF_lastName', 'PROF_birthYear',	'PROF_gender'];
		
		$v_list = new WOOOF_dataBaseTable($wo->db, 'v_voice_persons');
		if ( !$v_list->constructedOk ) { return false; }
		
		$res = $v_list->getResult(
			[],
			'VUS_username',
			'', '', '',
			true, false
		);
		if ( $res === FALSE ) { return false; }
		$ids = [];
		if ( $res['totalRows'] != 0 ) {
			foreach($v_list->resultRows as $v_user) {
				$user = [];
				$userId = $v_user['VUS_id'];
				WOOOF_Util::filterOnKeys($user, $userElems, $v_user);
				$users[$userId] = $user;
			}
		}
		
		//pass the keys from $users to $ids
		$ids = array_keys($users);

		//make the connections array
		$connectionInfoArray = VO_Social::getConnectionInfo($wo, $requestorUserId, $ids);
		if($connectionInfoArray === false) { return false; }

		//merge the users array (with main info) with the connections array
		foreach($users as $aKey => &$aUser) {
			$aUser['connections'] = $connectionInfoArray[$aKey];
		}
		
		//convert the associative array to a simple array to come back to the frontend
		$connections = array_values($users); 
		
		return $connections;
	}	// getUsers
	
}	// VO_Users