import React from 'react';
import ReactDom from 'react-dom';
var moment = require('moment');

import MessagesBoxComp from './MessagesBoxComp';
import LoadingComp from './LoadingComp';
var RB = require('react-bootstrap');

export default React.createClass({ //ContentSectionsComp

	/*
		Properties
		1. contentId (mandatory)
		2. data (result of VO_Content::getContent())
	*/

	getDefaultProps: function() {
		return {
			data: {},
			contentId: '',
			editable: false
		};
	},

	getInitialState: function() {
		return { 
			data: {},
			loading: false,
			showAddButton: true,
			showSectionForm: false
		}
	},

	onPlusClick: function() {
		this.setState({ 
			showSectionForm: true,
			showAddButton: false
		});  
	},

	componentDidMount: function() {
		if(Object.keys(this.props.data).length === 0) {
			var data = {
				id: this.props.contentId
			};
			VOICE.ajaxCall(VOICE.linkPrefix('api/contents/getContent'), 'POST', data, this, this.handleGetContent);
			return {
				loading: false,
				data: {}
			}	
		}
		else {
			return {
				loading: false,
				data: this.props.data
			}
		}
		
	},

	handleGetContent: function(result) {
		if(result.getContentOk)
		this.setState({
			data: result.getContent.sections
		});
	},

	handleCancelClick: function() {
		this.setState({
			showSectionForm: false,
			showAddButton: true
		});
	},

	showNewData: function(data, flags) {
		this.setState({
			res: data,
			showAddButton: flags.showAddButton,
			showSectionForm: flags.showSectionForm
		});
	},

    render: function() {
	  	var results = this.state.res || this.props.data;
	  	console.log('CONTENT SECTIONS: ', results);
	  	var self = this;

		//var memberSince = moment.utc(result.IDE_effectiveDate, 'YYYYMMDDhhmmss').fromNow();
	  	return (
			<div>
				<RB.Row>
					<span>
						{ 
							this.state.showAddButton && this.props.editable ? 
								<center>
									<a href="javascript:void(0)" onClick={this.onPlusClick}>
										<i className="fa fa-plus-circle"></i> Add Section
									</a><br/><br/>
								</center> : null 
						}
					</span>
				</RB.Row>
				<RB.Row>
					{
						results.map(function(result) {
							return (
								<Section lookUps={self.props.lookUps} editable={self.props.editable} actionEdit={false} ref="section" onActionReturn={self.showNewData} contentId={self.props.contentId} key={result.id} result={result}></Section>
							)
						})
					}
				</RB.Row>
				<RB.Row>
					<RB.Col md={12}>
						{ this.state.showSectionForm ? <SectionForm key={0} lookUps={this.props.lookUps} onActionReturn={self.showNewData} sectionAction="add" contentId={this.props.contentId} onCancelClick={this.handleCancelClick} /> : null }
					</RB.Col>
				</RB.Row>
			</div>
	    );
    }
}); //ContentSectionsComp

var Section = React.createClass({
	
	getInitialState: function() {
		return {};
	},

	componentWillReceiveProps: function(nextProps) {
		this.setState({
			edit: nextProps.actionEdit
		});
	},

	onBanClick: function(sectionData, event) {
		VOICE.ajaxCall(VOICE.linkPrefix('api/content/section/delete'), 'POST', sectionData, this, this.cbHandleDelete);
		//TODO - update view
	},

	cbHandleDelete: function(result) {
		if(result.actionOk) {
	  		this.refs.msgBox.clearErrors();
			this.refs.msgBox.addSuccess('Section deleted successully!', false);
		  	//setTimeout(this.refs.msgBox.clearSuccesses, 3000);
		  
	 		var url = VOICE.linkPrefix('api/content/sections/get/'+this.props.contentId);

		    VOICE.ajaxCall(url, 'GET', {}, this, this.cbHandleDeleteSection);
	  	}
	  	else {
			this.refs.msgBox.addError(result.errors);
	  	}
	},

	cbHandleDeleteSection: function(result) {
		if(result.actionOk) {
			this.props.onActionReturn(result.data, {
				showSectionForm: false,
				showAddButton: true
			});
		}
		else {
			this.refs.msgBox.addError(result.errors);
		}
	},

	onEditClick: function(sectionData, event) {
		this.setState({
			edit: true
		});
	},

	handleCancelClick: function(data) {
		this.setState({
			edit: false
		});
	},

	render: function() {
		var data = this.props.result;
		
		return (
			<span>
				{
					!this.state.edit ? 
						<span>
							{
							
								this.props.editable ? 
									<a href="javascript:void(0)">
										<i className="fa fa-pencil smallFa" data-section-id={data.id} onClick={this.onEditClick.bind(null, data)}></i>
									</a> : null
							}
							<div>
								<b>
									<span> {data.title} </span><br/>
									<span> {data.theText} </span>
								</b>
							</div>
							{
							
								this.props.editable ?
									<a href="javascript:void(0)">
										<i className="fa fa-ban smallFa" data-section-id={data.id} onClick={this.onBanClick.bind(null, data)}></i>
									</a> : null
							}
							<br/><br/>
						</span> : 
						<RB.Row>
							<RB.Col md={12}>
								<SectionForm {...this.props} lookUps={this.props.lookUps} key={data.id+'FRM'} contentId={this.props.contentId} sectionAction="edit" onCancelClick={this.handleCancelClick} />
							</RB.Col><br/>
						</RB.Row>
				}
				<br/>
				<RB.Row>
					<RB.Col md={12}>
						<MessagesBoxComp ref="msgBox"/>
					</RB.Col>
				</RB.Row>
			</span>
		);
	}
});

var SectionForm = React.createClass({

  getInitialState: function() {
  	 console.log('getInitialState', this.props);
  	 return {
  	 	loading: false
  	 }
  },

  handleSubmit: function(e) {
	e.preventDefault();
	
	var title = this.refs.title.getValue() || '';
    var theText = this.refs.theText.getValue() || '';
    var sectionType = this.refs.sectionType.getValue() || '';
    var typeOfText = this.refs.typeOfText.getValue() || '';
    var mnemonicCode = this.refs.mnemonicCode.getValue() || '';

    if ((!title && !theText) || !sectionType) {
    	alert('Please fill all the required input fields!');
        return;
    }

    var data = {
    	contentId: this.props.contentId,
    	title: title,
		theText: theText,
		sectionType: sectionType,
		typeOfText: typeOfText,
		mnemonicCode: mnemonicCode,
    };

    if ( typeof this.props.result !== 'undefined')  {
		data.id = this.props.result.id;
		data.textSectionId = this.props.result.textSectionId;
		data.otherSectionId = this.props.result.otherSectionId;
	}
    
    console.log('SECTION SAVE: ', data);

    //ajax call to save/author
    VOICE.ajaxCall(VOICE.linkPrefix('api/content/section/save'), 'POST', data, this, this.cbHandleSave);

    this.setState({
		loading: true
    });
  },

  cbHandleSave: function(result) {
  	console.log('RESULT SAVE SECTION: ', result);
  	if(result.actionOk) {
  		this.refs.msgBox.clearErrors();
		this.refs.msgBox.addSuccess('Section saved successully!', false);
	  	//setTimeout(this.refs.msgBox.clearSuccesses, 3000);
	  
 		var url = VOICE.linkPrefix('api/content/sections/get/'+this.props.contentId);

	    VOICE.ajaxCall(url, 'GET', {}, this, this.cbHandleSaveSection);
  	}
  	else {
		this.refs.msgBox.addError(result.errors);
  	}
  	this.setState({
		loading: false
	});
  },

  cbHandleSaveSection: function(result) {
  	if(result.actionOk) {
  		this.props.onActionReturn(result.data, {
  			showSectionForm: false,
			showAddButton: true
  		});
  	}
	else {
		this.refs.msgBox.addError(result.errors);
	}
  },
  
  handleCancel: function() {
	this.props.onCancelClick({
		showSectionForm: false,
		showAddButton: true
	});
	
	return;
  },
  
  render: function() {
  	if(this.props.sectionAction === 'add') {
  		var data = '';
  	}
  	else {
  		var data = this.props.result;
  	}

  	console.log('this.props: ', this.props);

    return (
	  <form className="sectionForm">
		<RB.Row>
			<RB.Col md={12}>
				<RB.Input type="text" defaultValue={data.title} ref="title" name="title" addonBefore="Title" placeholder="Title..." />
			</RB.Col>
			<RB.Col md={12}>
				<RB.Input type="textarea" cols="40" rows="10" addonBefore="Text" placeholder="Text..." defaultValue={data.theText} ref="theText" name="theText" />
			</RB.Col>
		</RB.Row><br/>
		<RB.Row>
			<RB.Col md={6}>
				<RB.Input defaultValue={data.sectionType} type="select" addonBefore="Section Type (*)" ref="sectionType" name="sectionType" >
					<option value=""> - Select Section Type - </option>
					{VOICE.renderOptions(this.props.lookUps.CNT_SECTION_TYPE, 'code')}
				</RB.Input>
			</RB.Col>
			<RB.Col md={6}>
				<RB.Input defaultValue={data.typeOfText} type="select" addonBefore="Text Type" ref="typeOfText" name="typeOfText" >
					<option value=""> - Select Text Type - </option>
					{VOICE.renderOptions(this.props.lookUps.CNT_TEXT_TYPE, 'code')}
				</RB.Input>
			</RB.Col>
		</RB.Row><br/>
		<RB.Row>
			<RB.Col md={12}>
				<RB.Input type="text" defaultValue={data.mnemonicCode} ref="mnemonicCode" name="mnemonicCode" addonBefore="Mnemonic Code" placeholder="Mnemonic Code..." />
			</RB.Col>
		</RB.Row><br/>
		<div className="row">
			<center>
	            	{
               			this.state.loading === false ?
                  			<div className="col-md-1 col-md-offset-5">
								<button type="button" className="btn btn-success" onClick={this.handleSubmit}><i className="glyphicon glyphicon-ok-sign"></i> Save</button>
							</div> :
                  			<LoadingComp loadingText="Saving Section..."></LoadingComp>
             	    }
            </center>
			<div className="col-md-1">
				<button type="button" onClick={this.handleCancel} className="btn btn-danger">Cancel</button>
			</div>
		</div><br/>
		<RB.Row>
			<RB.Col md={12}>
				<MessagesBoxComp ref="msgBox"/>
			</RB.Col>
		</RB.Row>
      </form>
    );
  } 
});	// SectionForm