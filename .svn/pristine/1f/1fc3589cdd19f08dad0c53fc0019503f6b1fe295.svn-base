<?php

class VO_CtrlContent {
	const _ECP = 'CCO';	// Error Code Prefix
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $action	// authorSave, authorDelete, sectionSave, sectionDelete
	 * @param array $in
	 * @return false | [ 'actionOk' => bool, 'id' => id ]
	 */
	
	public static function contentSaveDeleteAPI( WOOOF $wo, $action, $in ) {
	
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
	
		if( !$wo->hasContent($in) ) {
			$wo->logError(self::_ECP."1000 You must provide data for [$action]");
			return false;
		}
		
		$userId = $wo->app->userId;
		
		switch( $action ) {
			case 'authorSave':
				$res = VO_Content::authorSave($wo, $in, $userId); 
				break;
			case 'authorDelete':
				$res = VO_Content::authorDelete($wo, $in, $userId);
				break;
			case 'sectionSave':
				$tmpArr = [];
				$res = VO_Content::sectionSave($wo, $in, $userId, $tmpArr );
				break;
			case 'sectionDelete':
				// TODO: Extra param for recursive ??
				$res = VO_Content::sectionDelete($wo, $in, $userId, true);
				break;
			default:
				$wo->logError(self::_ECP."1100 Unknown action [$action]");
				$res = false;
		}
	
		if($res === FALSE) {
			$out = [
				'actionOk' => false,
				'errors' 		=> $wo->getErrorsAsArrayAndClear()
			];
			$wo->db->rollback();
		}
	
		else {
			$out = [
				'actionOk'	=> true,
				'id'	=> $res,
			];
			$wo->db->commit();
		}
	
		return $out;
	
	}	// contentSaveDeleteAPI
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $contentId
	 * @return false | [ 'actionOk' => bool, 'data' => [] ]
	 */
	
	public static function authorsGet( WOOOF $wo, $contentId ) {
	
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
	
		if( !$wo->hasContent($contentId) ) {
			$wo->logError(self::_ECP."1000 You must provide 'contentId'");
			return false;
		}
	
		$userId = $wo->app->userId;
		
		$res = VO_Content::authorsGet($wo, $contentId, $userId);
	
		if($res === FALSE) {
			$out = [
				'actionOk' => false,
				'errors'   => $wo->getErrorsAsArrayAndClear()
			];
		}
	
		else {
			$out = [
				'actionOk'	=> true,
				'data'		=> $res,
			];
		}
	
		return $out;
	
	}	// authorsGet
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $contentId
	 * @return false | [ 'actionOk' => bool, 'data' => [] ]
	 */
	
	public static function sectionsGet( WOOOF $wo, $contentId ) {
	
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
	
		if( !$wo->hasContent($contentId) ) {
			$wo->logError(self::_ECP."1000 You must provide 'contentId'");
			return false;
		}
	
		$userId = $wo->app->userId;
	
		$res = VO_Content::sectionsGet($wo, $contentId, $userId);
	
		if($res === FALSE) {
			$out = [
					'actionOk' => false,
					'errors'   => $wo->getErrorsAsArrayAndClear()
			];
		}
	
		else {
			$out = [
					'actionOk'	=> true,
					'data'		=> $res,
			];
		}
	
		return $out;
	
	}	// sectionsGet
	
	
}	// VO_CtrlContent