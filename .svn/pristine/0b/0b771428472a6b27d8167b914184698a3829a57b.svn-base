<?php

class VO_Tags {
	const _ECP = 'TAG';	// Error Code Prefix
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function search( WOOOF $wo, $input, $categoryType, $matchMode='STD', $data='FULL', $maxRows=100 )
	{
		$maxRows = (int) $maxRows;
	
		$searchFT = VO_Various::formBooleanSearchString( $wo, $input );
				
		$sql =  "select id value, concat(tagPhrase, ' [', categoryType, ']' ) label ";
		$sql .=	"from tags ";
		$sql .= "where match(tagPhrase) against('{$searchFT}' IN BOOLEAN MODE) and isDeleted='0' ";
		if ($wo->hasContent($categoryType)) {
			$sql .= " and categoryType = '$categoryType' ";
		}
		$sql .= "order by tagPhrase ";
		$sql .= "limit $maxRows";
	
		$res = $wo->db->getResultByQuery($sql, true, false);
		if ( $res === FALSE ) { return FALSE; }
	
		$res = $wo->db->resultRows;
	
		$out = [];
		foreach( $res as $view ) {
			$out[] = [
				'value' => $view['value'],
				'label' => $view['label']
			];
		}
	
		return $out;
	}	// search
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @return false | array
	 * Returns look ups for services in front end
	 */
	public static
	function getServicesLookup( WOOOF $wo )
	{
		$t1 = new WOOOF_dataBaseTable($wo->db, 'tags');
		if ( !$t1->constructedOk ) { return false; }
		$out = [];
		$res = $t1->getResult(
			['categoryType' => 'SRV'],
			'tagPhrase', '', '', '', true, false
		);
		if ( $res === FALSE ) { return false; }
	
		if ( $res['totalRows'] != 0 ) {
			foreach($t1->resultRows as $service) {
				$out[] = [
					'value' => $service['id'],
					'label' => $service['tagPhrase']
				];
			}
		}
	
		return $out;
	
	} // getServicesLookup
	
		/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function searchTagsAndAreas( WOOOF $wo, $input, $data='FULL', $maxRows=100 )
	{
		$maxRows = (int) $maxRows;

		$searchFT = VO_Various::formBooleanSearchString( $wo, $input );
		
		$sql =  "select concat('TAG_',id) value, concat(tagPhrase, ' [', categoryType, ']' ) label ";
		$sql .=	"from tags ";
		$sql .= "where match(tagPhrase) against('{$searchFT}' IN BOOLEAN MODE) and isDeleted='0' ";
		
		$sql .= 'UNION ALL ';
		$sql .=  "select concat('ARE_',id), concat(name, ' [AREA]')  ";
		$sql .=	"from areas ";
		$sql .= "where match(name) against('{$searchFT}' IN BOOLEAN MODE) and isDeleted='0' ";
		
		
		$sql .= "order by 2 ";
		$sql .= "limit $maxRows";
	
		$res = $wo->db->getResultByQuery($sql, true, false);
		if ( $res === FALSE ) { return FALSE; }
	
		$res = $wo->db->resultRows;
	
		$out = [];
		foreach( $res as $view ) {
			$out[] = [
				'value' => $view['value'],
				'label' => $view['label']
			];
		}
	
		return $out;
	}	// searchAll
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param array $in
	 * @param string $orgId
	 * @return false | id
	 * Returns actually saved $obj
	 */
	public static
	function saveTags( WOOOF $wo, $in, $orgId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		if(!$wo->hasContent($in)) {
			$wo->logError(self::_ECP."9092 No value provided for tags");
			return false;
		}
	
		foreach ($in as $tag) {
			$status = $tag['_status'];
	
			//if status === 'R'
			if($status === 'R' || $status === 'U') {
				continue;
			}
	
			//if status !== 'R'
			//case 'I'
			if($status === 'I') {
				$tblTagInsert = new VO_TblOrganisationTags($tag);
				$tblTagInsert->id = '';
				$tblTagInsert->organisationId = $orgId;
	
				$res = self::save($wo, $tblTagInsert);
				if($res === FALSE) { return false; }
			}
	
			//case 'D'
			elseif($status === 'D') {
				$res = self::delete($wo, $tag['id']);
				if($res === FALSE) { return false; }
			}
	
			else {
				$wo->logError(self::_ECP."0578 Wrong status [$status]");
				return false;
			}
	
		}
		
		
	
		return $res;
	}	// saveTags
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param VO_TblOrganisationTags $obj
	 * @param bool $fetchBack
	 * @param array $tag
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static
	function save( WOOOF $wo, VO_TblOrganisationTags &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		 
		if ( !$wo->hasContent($obj->tagId) ) {
			$wo->logError(self::_ECP."0298 No value provided for [tagId]" );
			return false;
		}
	
		$tblTagGeneric = new WOOOF_dataBaseTable($wo->db, 'organisation_tags');
		if($tblTagGeneric === FALSE) { return false; }
	
		if ( $wo->hasContent($obj->id) ) {
			// update
			
			//$res = $tblTagGeneric->updateRowFromArraySimple( $obj->toArray() );
			//if ( $res === FALSE ) { return FALSE; }
		}
		else {
			// insert
				
			$newId = $tblTagGeneric->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
		}
	
		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
		 
		return $obj->id;
	}	// save
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $id
	 * @return bool
	 */
	public static
	function delete( WOOOF $wo, $id )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
			
		if ( !$wo->hasContent($id) ) {
			$wo->logError(self::_ECP."0191 No value provided for [id]" );
			return false;
		}
	
		$tblTagGeneric = new WOOOF_dataBaseTable($wo->db, 'organisation_tags');
		if($tblTagGeneric === FALSE) { return false; }
	
		$res = $tblTagGeneric->deleteRow($id);
		if($res === FALSE) { return false; }
			
		return true;
	}	// delete
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
}	// VO_Tags