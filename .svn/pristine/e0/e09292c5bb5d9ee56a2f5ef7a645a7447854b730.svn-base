<?php

class VO_Addresses {
	const _ECP = 'ADR';	// Error Code Prefix
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
  
	/**
	 * 
	 * @param WOOOF $wo
	 * @param VO_TblAddressGeneric $obj
	 * @param bool $fetchBack
	 * @param array $address
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static 
	function save( WOOOF $wo, VO_TblAddressGeneric &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	    
		if ( !$wo->hasContent($obj->areaId) ) {
			$wo->logError(self::_ECP."0450 No value provided for [areaId]" );
			return false;
		}
		
		$tblAddressGeneric = new WOOOF_dataBaseTable($wo->db, 'address_generic');
		if($tblAddressGeneric === FALSE) { return false; }
		
		if ( $wo->hasContent($obj->id) ) {
			// update
			
			$res = $tblAddressGeneric->updateRowFromArraySimple( $obj->toArray() );
			if ( $res === FALSE ) { return FALSE; }
		}
		else {
			// insert
			
			$obj->createdDateTime = WOOOF::getCurrentDateTime();
			
			$newId = $tblAddressGeneric->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
		}

		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
	  
		return $obj->id;
	}	// save
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @return false | array[ ]
	 */
	public static
	function getFull( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  $voiceUserId" );
		 
		if(!$wo->hasContent($voiceUserId)) {
			$wo->logError(self::_ECP."0011 No value provided for [voiceUserId]");
			return false;
		}
		
		//----------------- GET MAIN INFO -----------------------------------
		//2os tropos xwris na xreiastei na kataskeuaseis ton pinaka
		$voiceUser = $wo->db->getRow('voice_users', $voiceUserId); //fernei olo to row
		if($voiceUser === FALSE) { return false; }
		$main['voiceUserId'] = $voiceUser['personProfileId'];
		
		$avatarImg = WOOOF_ExternalFiles::getFileObject($wo, $voiceUser['avatarImg']);
		if($avatarImg === FALSE) {return false;}
		$main['avatarImgObject'] = $avatarImg;
		
		$voiceUserProfile = $wo->db->getRow('person_profiles', $voiceUser['personProfileId']); //fernei olo to row
		if($voiceUserProfile === FALSE) { return false; }
		
		$cvFile = WOOOF_ExternalFiles::getFileObject($wo, $voiceUserProfile['cvFile']);
		if($cvFile === FALSE) {return false;}
		$main['cvFileObject'] = $cvFile;
		
		$mainElems = ['firstName', 'lastName', 'middleName', 'gender', 'birthYear'];
		
		WOOOF_Util::filterOnKeys($main, $mainElems, $voiceUserProfile);
		//-----------------------------------------------------------------------
		
		//---------------------- GET ADDRESSES -------------------------------------
		$addresses = []; //array to be sent to react element
		$addressElems = ['id', 'areaId', 'addressTypeDVId', 'addressText', 'fromDate', 'toDate'];
		
		$v_person = new WOOOF_dataBaseTable($wo->db, 'v_person_profile_addresses');
		if ( !$v_person->constructedOk ) { return false; }
		
		$res = $v_person->getResult(
			[
				'PROF_id' => $voiceUser['personProfileId']
			],
			'fromDate',
			'', '', '',
			true, false
		);
		if ( $res === FALSE ) { return false; }
		
		if ( $res['totalRows'] != 0 ) {
			foreach($v_person->resultRows as $v_address) {
				$address = [];
				WOOOF_Util::filterOnKeys($address, $addressElems, $v_address);
				array_push($addresses, $address);
			}
		}
		//------------------------------------------------------------------------
		
		return [
			'main' => $main,
			'addresses' => $addresses
		];
		
	}	// getFull
	
	/***************************************************************************/
	//
	/***************************************************************************/
  
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @param string $token
	 * @return bool
	 */
	public static
	function handleVerificationToken( WOOOF $wo, $voiceUserId, $emailTo, $token )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		
		$route = 'register/verify?token='.$token;
		
		$fragmentParams = array( 'URL' => $wo->fullURL($route) );
		$fragments = $wo->fetchApplicationFragment('registrationVerificationEmail.php', $fragmentParams );
		
		$content = $fragments['formTop'];
		
		$emailAddress	= $emailTo;
		$subject		= $fragments['subject'];
		$message		= $fragments['messageText'];
		$replyTo 		= '';
		$cc		 		= '';
		$htmlMessage	= $fragments['messageHTML'];
		$files			= null;
		
		$res = $wo->sendMail('',$emailAddress,$subject,$message,$replyTo,$cc,$htmlMessage,$files);
		
		if ( $res === FALSE ) {
			$wo->logError( self::_ECP."0020 Failed to send registration verification email to [$emailTo]" );
			return FALSE;
		}
		
		return true;
		
	}	// handleVerificationToken
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param array $in
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static 
	function saveMainInfo( WOOOF $wo, $in )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		
		if(!$wo->hasContent($in['voiceUserId'])) {
			$wo->logError(self::_ECP."0011 No value provided for [voiceUserId]");
			return false;
		}
		
		if(!$wo->hasContent($in['firstName'])) {
			$wo->logError(self::_ECP."0012 No value for first name");
			return false;
		}
		
		if(!$wo->hasContent($in['lastName'])) {
			$wo->logError(self::_ECP."0014 No value for last name");
			return false;
		}
		
		$voiceUser = $wo->db->getRowByColumn('voice_users', 'userId', $wo->userData['id']); //fernei olo to row
		if($voiceUser === FALSE) { return false; }
		
		$tblVoiceUser = new VO_TblUser($voiceUser);
		 
		$t1 = new WOOOF_dataBaseTable($wo->db, 'voice_users');
		
		//$tblVoiceUser->avatarImg = $t1->handleFileUpload('avatarImg', $tblVoiceUser->avatarImg);
		//if($tblVoiceUser->avatarImg === FALSE) { return false; }
		
		$res = self::save($wo, $tblVoiceUser);
		if($res === FALSE) { return false; }
		
		$voiceUserProfile = $wo->db->getRow('person_profiles', $voiceUser['personProfileId']); //fernei olo to row
		if($voiceUserProfile === FALSE) { return false; }
		
		$tblProfile = new VO_TblPersonProfile($voiceUserProfile);
		$tblProfile->firstName = $in['firstName'];
		$tblProfile->lastName = $in['lastName'];
		$tblProfile->middleName = $in['middleName'];
		$tblProfile->birthYear = $in['birthYear'];
		$tblProfile->gender = $in['gender'];
		
		$t2 = new WOOOF_dataBaseTable($wo->db, 'person_profiles');
		
		$tblProfile->cvFile = $t2->handleFileUpload('cvFile', $tblProfile->cvFile);
		if($tblProfile->cvFile === FALSE) { return false; }
		
		$res2 = VO_PersonProfiles::save($wo, $tblProfile);
		if($res2 === FALSE) { return false; }
		
		return $res2;
	}	// saveMainInfo
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param array $in
	 * @return false | id
	 * Returns actually saved $obj
	 */
	public static
	function saveAddresses( WOOOF $wo, $in )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );

		if(!$wo->hasContent($in)) {
			$wo->logError(self::_ECP."0031 No value provided for addresses");
			return false;
		}
		
		foreach ($in as $address) {
			$status = $address['_status'];
			
			//find specific row for cases 'U' and 'D'
			$tmpAddress = $wo->db->getRow('address_generic', $address['id']);
			if($tmpAddress === FALSE) { return false; }
			
			if($status !== 'R') {
				$tblAddressGeneric = new WOOOF_dataBaseTable($wo->db, 'address_generic');
				
				//case 'I'
				if($status === 'I') {
					$voiceUser = $wo->db->getRowByColumn('voice_users', 'userId', $wo->userData['id']); //fernei olo to row
					if($voiceUser === FALSE) { return false; }
					
					$tblAddressInsert = new VO_TblAddressGeneric();
					
					$tblAddressInsert->addressTypeDVId = $address['addressTypeDVId'];
					$tblAddressInsert->addressText = $address['addressText'];
					$tblAddressInsert->genericType = 'PRS';
					$tblAddressInsert->genericId = $voiceUser['personProfileId'];
					$tblAddressInsert->fromDate = $address['fromDate'];
					$tblAddressInsert->toDate = $address['toDate'];
					$tblAddressInsert->areaId = $address['areaId'];
					$tblAddressInsert->createdDateTime = WOOOF::getCurrentDateTime();
					
					$res = $tblAddressGeneric->insertRowFromArraySimple($tblAddressInsert);
					if($res === FALSE) { return false; }
					
					return $res;
				}
				
				//case 'U'
				elseif($status === 'U') {
					
					$tblAddressUpdate = new VO_TblAddressGeneric($tmpAddress);
					
					//OK
					$tblAddressUpdate->addressTypeDVId = $address['addressTypeDVId']; 
					
					//OK
					$tblAddressUpdate->addressText = $address['addressText']; 
					
					//OK
					$tblAddressUpdate->fromDate = $address['fromDate'];
					$tblAddressUpdate->toDate = $address['toDate'];

					//TODO
					$tblAddressUpdate->areaId = $address['areaId']; 

					$res = $tblAddressGeneric->updateRowFromArray($tmpAddress['id'], $tblAddressUpdate->toArray());
					if($res === FALSE) { return false; }
					
					return $tmpAddress['id'];
				}
				
				//case 'D'
				else {
					$res = $tblAddressGeneric->deleteRow($tmpAddress['id']);
					if($res === FALSE) { return false; }
					return $tmpAddress['id'];
				}
			}
			
			//case 'R'
			else {
				continue;
			}
		}
	
		return false;
	}	// saveAddresses
	
}	// VO_Users