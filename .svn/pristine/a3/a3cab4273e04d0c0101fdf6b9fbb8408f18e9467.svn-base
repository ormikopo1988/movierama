import React from 'react';
import ReactDom from 'react-dom';
import $ from 'jquery';

var RB = require('react-bootstrap');

import YearInputComp from './YearInputComp.jsx';
import MessagesBoxComp from './MessagesBoxComp';
import VOICE from './voice.js';

export default React.createClass({ //RegisterBox
  /* props: 
  	nextRoute 
  	ranges.birthYear
  */
  
  getInitialState: function() {
    return {data: []};
  },
  
  render: function() {
    return (
		<div className="registerBox">
		  <h1>Register</h1>
		  <RegisterForm {...this.props} />
		</div>
    );
  }
  
});	// RegisterBox

//VOICE.comps.RegisterBox = RegisterBox;


/*----------------------------------------------------------------------------*/

var OrganisationReg = React.createClass({
	getInitialState: function() {
		return { 
			hide: true, individualOnly: true, canBeAdmin: false, 
			isOrgInVOICE: false, orgInfo: undefined, 
			registerAs: null, 
			loading: false  
		};
	}
	,

	render: function() {
		var orgInfo = this.state.orgInfo;
		var indiv =  ( this.state.individualOnly || this.state.registerAs == 'ind' );	// not used for now
		//console.log('render indiv isOrgInVOICE', indiv, this.state.isOrgInVOICE);

		var memberOrAdminElemement = (
			this.state.canBeAdmin  ?
			<code>Administrator</code>
			:
			'member'
		);

		var orgInfoElement = (
			this.state.individualOnly  ?
			null :
			(
				<div className="input-group">
					<span className="input-group-addon">
						<input type="radio" name="registerAs" value="org" checked={!indiv} onChange={this.cbRegisterAsOnChange}/>
					</span>
					<div className="form-controlXXXX"> 
						Register as {memberOrAdminElemement} of the <strong>{orgInfo.name} </strong>
						<i>({orgInfo.description})</i>

						{ this.state.isOrgInVOICE ? <i className="fa fa-check"></i> : null }
						{ orgInfo.isReallyInVOICE  ? <i className="fa fa-check"></i> : null }
						{ orgInfo.logoURL !== '' ? 
							<div><center><RB.Image src={orgInfo.logoURL} responsive width={100}  /></center></div> 
							: null 
						}
					</div>
				</div>
			)
		);

    	return (
    		this.state.hide ? 
	    		( this.state.loading ? 
	    			<div>
	    				<h4>
	    					<span><i className="fa fa-spinner fa-pulse"></i> Lookin up Organisation...</span>
	    				</h4>
	    			</div> :
	    			null
	    		)
    		:
	   			(
		       <RB.Well>
 					<div id="registerAs" style={{textAlign: 'center'}}>
		         		<center><h4>Register as</h4></center>
		         		<RB.Row>
		         			<RB.Col md={12}>
								{orgInfoElement}
							</RB.Col>
		         		</RB.Row>
		         		<RB.Row>
		         			<RB.Col md={12}>
								<div className="input-group">
									<span className="input-group-addon">
										<input type="radio" name="registerAs" value="ind" checked={indiv} onChange={this.cbRegisterAsOnChange} />
									</span>
									<div className="form-control"> Register as Individual</div>
								</div>
							</RB.Col>
			      		</RB.Row>
					</div>
			    </RB.Well>
				)
    	);
  	}
  	,

 	cbRegisterAsOnChange: function(e) {
 		this.setState( { registerAs: e.target.value } );
 	}
 	,

  	reset: function(loading) {
  		loading = loading || false;	// def value
 		this.setState(
  		{
			hide: true, 
			loading: loading,
			individualOnly: true, 
			canBeAdmin: false,
			isOrgInVOICE: false,
			orgInfo: undefined
		});
  		return;
	}

});	 // OrganisationReg

/*----------------------------------------------------------------------------*/

var RegisterForm = React.createClass({
    hm: {
    	  email: 'This e-mail will be used for Registering and Logging In VOICE',
	      firstName: '',
	      lastName: '',
	      birthYear: '',
	      password: 'Password must be at least 8 chars and include at least one Capital letter and one digit',
	      passwordConfirm: '',
	      registerAs: '',
	    }
	,    

	getInitialState: function() {
		return {
			showRegButton: false,
			isLoading: false,
			emailData: { bsStyle: null, helpMessage: this.hm.email },
			firstNameData: { bsStyle: null, helpMessage: this.hm.firstName },
			lastNameData: { bsStyle: null, helpMessage: this.hm.lastName },
			birthYearData: { bsStyle: null, helpMessage: this.hm.birthYear },
			passwordData: { bsStyle: null, helpMessage:  this.hm.password },
			passwordConfirmData: { bsStyle: null, helpMessage: this.hm.passwordConfirm },
		}
	}
	,

	componentDidMount: function() {
		//console.log('mount');
		//ReactDOM.findDOMNode(this.refs.userEmail).focus();
	}
	,

	addErrors: function(msg, clear) {
		// msg can be a single String or an array of Strings
		clear = ( typeof clear !== 'undefined' ? clear : false );	// def value

		//console.log('addErrors: ', msg, clear);
		this.refs.msgBox.addError(msg, clear);
	}
	,

	clearErrors: function(msg) {
		this.refs.msgBox.clearAll();
	}
	,

	handleKeyPress: function(e) {
		//console.log(e);
		if (!e) e = window.event;
    	var keyCode = e.keyCode || e.which;
    	if (keyCode == '13'){
      		this.handleCheckEmail();
      		return false;
    	}
	}
	,

	handleCheckEmail: function(e) {
		console.log( 'handleCheckEmail', this );
		this.setState( {showRegButton: false} );
    
		var self = this;
    	self.clearErrors();

	    var data = {
	      email: this.refs.userEmail.getValue().trim()
	    };
	    
	    if(data.email.length == 0) {
	   		//userEmailDOMNode.focus();
	   		this.refs.userEmail.getInputDOMNode().focus();
	    	this.setState( {showRegButton: false, emailData: {bsStyle:'error', helpMessage:'Please provide your e-mail'} } );

	   		//this.addErrors( 'Please provide your e-mail.', true);
	    	this.refs.orgReg.reset();
	    }
	    else {
	    	this.refs.orgReg.reset(true);
	    	VOICE.ajaxCall('api/registration/checkEmail/'+data.email, 'GET', data, self, self.cbCheckEmail );
	    }
	}	// handleCheckEmail
	,

	cbCheckEmail: function(result) {
		//console.log( 'cbCheckEmail', this );

		this.refs.orgReg.setState( {hide: true} );

    	var self = this;
		console.log(result);
		
		self.clearErrors();
		
		var errorMessages = [];
		
    	if ( result.emailAlreadyIn ) {
	   		this.refs.userEmail.getInputDOMNode().focus();
	    	this.setState( {
	    		showRegButton: false, 
	    		emailData: {
	    			bsStyle:'error', 
	    			helpMessage:'This email is already registered! Maybe you would like to Login?'
	    		} 
	    	} );

	    	this.setState( {showRegButton: false} );
	    	// Cannot click on link anyway, because of reseting focus to the email field :-(
	   		//errorMessages.push('You are already registered! Maybe you would like to <a href="login">Login</a>?');
    		this.refs.orgReg.reset();
    	}
    	else {
    		//do something with result from db
	    	if(result.isValidEmail === false) {
		   		this.refs.userEmail.getInputDOMNode().focus();
		    	this.setState( {
		    		showRegButton: false, 
		    		emailData: {
		    			bsStyle:'error', 
		    			helpMessage:'The e-mail you provided does not look like a valid email.'
		    		} 
		    	} );
	    		this.refs.orgReg.reset();
	    	}
	    	else {
	    		this.setState( {
	    			showRegButton: true, 		    		
	    			emailData: {
		    			bsStyle: null, 
		    			helpMessage: this.hm.email
		    		} 
				} );

				this.refs.orgReg.setState( { 
					hide: false,
					individualOnly: result.isIndividual, 
					registerAs: ( result.isIndividual ? 'ind' : 'org'),
					canBeAdmin: result.canBeAdmin,
					isOrgInVOICE: result.isOrgInVOICE,
					orgInfo: result.orgInfo
				} );

			}
    	}
    	/*
    	if ( errorMessages.length > 0 ) {
    		this.addErrors(errorMessages);
    	}
    	*/
    }	// cbCheckEmail
	,
	
	handleSubmit: function(e) {
	    var self = this;
	    e.preventDefault();

	    self.clearErrors();
	    
	    var okToProceed = true;

	    var agreeWithTerms = ReactDOM.findDOMNode(this.refs.agreeCbx).checked;
/*
	    var email = this.refs.userEmail.getValue().trim();
	    var password = ReactDOM.findDOMNode(this.refs.password).value.trim();
	    var passwordConfirm = ReactDOM.findDOMNode(this.refs.passwordConfirm).value.trim();
	    console.log(agreeWithTerms);
	    //var registerAs = ReactDOM.findDOMNode(this.refs.registerAs).value();
	    var registerAs = this.refs.orgReg.state.registerAs;
	    //var adminCheckBox = $('#adminCheckBox').is(':checked') || false;
	    //var registerAs = $('input[type=radio][name=registerAs]:checked').val();
*/
	    var data = {
	      email: this.refs.userEmail.getValue().trim(),
	      firstName: this.refs.firstName.getValue().trim(),
	      lastName: this.refs.lastName.getValue().trim(),
	      birthYear: this.refs.birthYear.getValue(),
	      password: this.refs.password.getValue().trim(),
	      passwordConfirm: this.refs.passwordConfirm.getValue().trim(),
	      registerAs: this.refs.orgReg.state.registerAs
	    };

		console.log(data);
		
		this.clearErrors();

		var newState = {}
		newState.firstNameData	= (data.firstName == '' ? { bsStyle: 'error', helpMessage: 'Please fill-in' } : { bsStyle: null, helpMessage: this.hm.firstName });
		newState.lastNameData	= (data.lastName == '' ? { bsStyle: 'error', helpMessage: 'Please fill-in' } : { bsStyle: null, helpMessage: this.hm.lastName });
		newState.birthYearData	= (data.birthYear == '' ? { bsStyle: 'error', helpMessage: 'Please fill-in' } : { bsStyle: null, helpMessage: this.hm.birthYear });
		newState.passwordData 	= (data.password == '' ? { bsStyle: 'error', helpMessage: 'Please fill-in' } : { bsStyle: null, helpMessage: this.hm.password });
		newState.passwordConfirmData = (data.passwordConfirm == '' ? { bsStyle: 'error', helpMessage: 'Please fill-in' } : { bsStyle: null, helpMessage: this.hm.passwordConfirm });

		okToProceed = (
			data.firstName 		!= '' &&
			data.lastName 		!= '' &&
			data.birthYear 		!= '' &&
			data.password 		!= '' &&
			data.passwordConfirm 		!= ''
		);

		this.setState( newState );

		if ( !okToProceed) {
			this.addErrors( 'Please correct the errors above and retry.' );
		}

	    if ( !agreeWithTerms ) {
	    	okToProceed = false;
	   		this.addErrors( 'Please accept the Terms and Privacy Policy before proceeding.' );
	   		//return;
	    }
	    
	    if ( okToProceed ) {
	    	//console.log('DISABLED AJAX CALL');
		    this.setState({isLoading: true});
		    VOICE.ajaxCall('api/registration/do', 'POST', data, self, this.cbHandleSubmit);
		}

	    return;
	}	// handleSubmit
	,

	cbHandleSubmit: function(result) {
    	var self = this;

	    this.setState({isLoading: false});

    	console.log('cbHandleSubmit');
    	console.log(result);

    	if(result.registerOK === false) {
    		self.clearErrors();
    		self.addErrors(result.errors, true);
    	}
    	else {
    		self.clearErrors();
    		window.location = VOICE.linkPrefix(this.props.nextRoute);
    	}
    	
    	return;
    }		
	,

	componentDidMount: function() {
  		var self = this;
	    ReactDom.findDOMNode(this.refs.userEmail).focus(); 
  	}
  	,
  
  	reset: function(flag) {
  		this.refs.orgReg.setState(
  		{
			hide: true, 
			individualOnly: true, 
			canBeAdmin: false,
			isOrgInVOICE: false,
			orgInfo: undefined
		});
  		return;
	}
	,
  
  render: function() {
  	var isLoading = this.state.isLoading;

  	var personalDataRender  = (
  		this.state.showRegButton == false ?
  			null :
	       <RB.Well>
	         <center><h4>Tell us a bit about yourself</h4></center>
	         <RB.Row>
	            <RB.Col md={4}>
	                <RB.Input type="text" 
	                	autoFocus
		                placeholder="Your First Name..." ref="firstName" name="firstName"  
						help={this.state.firstNameData.helpMessage}
						bsStyle={this.state.firstNameData.bsStyle}
	                />
	            </RB.Col>
	            <RB.Col md={4}>
	                <RB.Input type="text" 
	                	placeholder="Your Last Name..." ref="lastName" name="lastName"  
						help={this.state.lastNameData.helpMessage}
						bsStyle={this.state.lastNameData.bsStyle}
					/>
	            </RB.Col>
	            <RB.Col md={4}>
				    <YearInputComp 
				    	placeholder="Your Year of Birth is" 
				    	ref="birthYear" name="birthYear" 
				    	min={this.props.ranges.birthYear[0]} max={this.props.ranges.birthYear[1]} 
						help={this.state.birthYearData.helpMessage}
						bsStyle={this.state.birthYearData.bsStyle}
				    ></YearInputComp>
	            </RB.Col>
	          </RB.Row>
	          {/*
	          <br/>
	          <RB.Row>
	            <RB.Col md={4}>
	                <RB.Input type="radio" label="Male" name="gender" ref="gender"   />
	                <RB.Input type="radio" label="Female" name="gender" ref="gender" />
	            </RB.Col>
	          </RB.Row>
			  */}
	        </RB.Well>
  	);

	var passwordsRender = (
		this.state.showRegButton == false ?
			null :
	       <RB.Well>
	         <center><h4>Your desired password</h4></center>
	         <RB.Row>
	            <RB.Col md={6}>
		        	<RB.Input  type="password" 
		        		className="form-control" ref="password" placeholder="Password..." aria-describedby="basic-addon3"
						help={this.state.passwordData.helpMessage}
						bsStyle={this.state.passwordData.bsStyle}
	        		></RB.Input>
	            </RB.Col>
	            <RB.Col md={6}>
		        	<RB.Input  type="password" 
		        		className="form-control" ref="passwordConfirm" placeholder="Retype Password..." aria-describedby="basic-addon4"
						help={this.state.passwordConfirmData.helpMessage}
						bsStyle={this.state.passwordConfirmData.bsStyle}
		        	></RB.Input>
	            </RB.Col>
	         </RB.Row>
	      </RB.Well>
	);

	var registerButtonDiv = ( 
		this.state.showRegButton ?
	        <div>
		        <RB.Row>
		            <center>
			            <label className="checkbox-inline">
			            	<input type="checkbox" name="agreeCbx" ref="agreeCbx" defaultChecked={false} />
       						I agree with the <a href={VOICE.linkPrefix('terms')} target="_blank">Terms</a>&nbsp;
       		 		    	and <a href={VOICE.linkPrefix('privacy')} target="_blank">Privacy Policy</a> of VOICE
		            	</label>
		            </center>
		        </RB.Row>
	            <br />
		        <RB.Row>
		            <center>
		                <RB.Button id="registerButton" 
		                	type="button"
		                	bsStyle="success"
		                	bsSize="large"
		                	disabled={isLoading}
        					onClick={!isLoading ? this.handleSubmit : null}
		                >
		                	
		                {isLoading ? 
		                	<span><i className="fa fa-circle-o-notch fa-spin"></i> Sending the information...</span> : 
		                	<span><i className="glyphicon glyphicon-ok-sign"></i> Register</span>
		                }
		                </RB.Button>
		            </center>
		        </RB.Row><br/>
			</div>
			:
			null
	);

	return (
      <div className="well well-large formInlineStyle">

	      {/*<form id="registerForm" className="registerForm" >*/}
	      <RB.Well>
	          <RB.Row>
	            <RB.Col md={6}>
	            	{/*
		        	<input type="text" className="form-control" ref="userEmail"  onBlur={this.handleCheckEmail} 
		        	 autoFocus={true} id="userEmail" placeholder="Your Email..." aria-describedby="basic-addon2"/>
	            	}
	            */}
				<RB.Input
					type="email"
					value={this.state.value}
					autoFocus={true}
					placeholder="Enter a valid e-mail"
					label="e-mail"
					help={this.state.emailData.helpMessage}
					bsStyle={this.state.emailData.bsStyle}
					hasFeedback
					ref="userEmail"
					groupClassName="group-class"
					labelClassName="label-class"
					onBlur={this.handleCheckEmail}
					onKeyPress={this.handleKeyPress}
				/>
		        </RB.Col>
		      </RB.Row>
		    </RB.Well>

	      	<br/>  
	        
	        <OrganisationReg ref="orgReg"/>

	        {personalDataRender}

	        {passwordsRender}

		    <br/>
	        <br/>

	        {registerButtonDiv}
	      
	      {/*</form>*/}

	      <MessagesBoxComp ref="msgBox"/>

      </div>
    );
  }
  
});	// RegisterForm


/*----------------------------------------------------------------------------*/

