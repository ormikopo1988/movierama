import React from 'react';
import ReactDom from 'react-dom';
var RB = require('react-bootstrap');
import $ from 'jquery';

import MessagesBoxComp from './MessagesBoxComp';
import GroupInvitationComp from './GroupInvitationComp';

export default React.createClass({ //GroupActionsComp

  getDefaultProps: function() {
    return {
      inList: true,
    };
  },

  getInitialState: function() {
    var member;
    var friendStatus;
    var isAdmin = 'false';
    console.log('PROPS: ', this.props);
    if(this.props.memberships.memberStatus === 'Y' || this.props.memberships.memberStatus === 'A') {
      member = 'true1'; //true1 means i am already member in the group
      if(this.props.memberships.memberStatus === 'A') {
        isAdmin = 'true';
      }
    }
    
    else if(this.props.memberships.memberStatus === 'N1'){
      member = 'false1'; //false1 means I am not a member and I have not already made a join request to a free group
    }

    else if(this.props.memberships.memberStatus === 'N2') {
      member = 'false2'; //false2 means I am not a member and I havent made a join request to a NOT free to join group
    }

    else if(this.props.memberships.memberStatus === 'N3') {
      member = 'false3'; //false3 means I am not a member of the group but I have made a request to join a not free group
    }

    else if(this.props.memberships.memberStatus === 'N4') {
      member = 'false4'; //false4 means I am not a member of the group but I have got an invitation from admin to join a not free group
    }

    return {
      memberships: this.props.memberships,
      member: member,
      isAdmin: isAdmin
  	};
  },

  requestJoinGroup: function(urlString) {
    var url = VOICE.linkPrefix(urlString);
    VOICE.ajaxCall(url, 'POST', {}, this, this.cbHandleRequestJoin);
  },

  cbHandleRequestJoin: function(result) {
    console.log(result);
    if(result.requestJoinOk) {
      this.refs.msgBox.clearErrors();
      this.refs.msgBox.addSuccess('Join request successful!', false);
      setTimeout(this.refs.msgBox.clearSuccesses, 3000);
      this.setState({
        member: 'false3'
      });

      var refreshData = {
        requestorId: VOICE.globals.userId,
        targetIds: [[this.state.memberships.targetId, this.props.targetType]]
      };
      console.log('Refresh Data: ', refreshData);
      VOICE.ajaxCall(VOICE.linkPrefix('api/groups/getMembershipInfo'), 'POST', refreshData, this, this.refreshData);
    }

    else {
      this.refs.msgBox.addError(result.errors);
      setTimeout(this.refs.msgBox.clearErrors, 5000);
    }
  },

  joinGroup: function(urlString) {
    var url = VOICE.linkPrefix(urlString);
    VOICE.ajaxCall(url, 'POST', {}, this, this.cbHandleJoin);
  },

  cbHandleJoin: function(result) {
    console.log(result);
    if(result.joinOk) {
      this.refs.msgBox.clearErrors();
      this.refs.msgBox.addSuccess('Follow successful!', false);
      setTimeout(this.refs.msgBox.clearSuccesses, 3000);
      this.setState({
        member: 'true1'
      });

      var refreshData = {
        requestorId: VOICE.globals.userId,
        targetIds: [[this.state.memberships.targetId, this.props.targetType]]
      };
      console.log('Refresh Data: ', refreshData);
      VOICE.ajaxCall(VOICE.linkPrefix('api/groups/getMembershipInfo'), 'POST', refreshData, this, this.refreshData);
    }

    else {
      this.refs.msgBox.addError(result.errors);
      setTimeout(this.refs.msgBox.clearErrors, 5000);
    }
  },

  deleteRequestJoinGroup: function(urlString) {
    var url = VOICE.linkPrefix(urlString);
    VOICE.ajaxCall(url, 'POST', {}, this, this.cbHandleDeleteRequest);
  },

  cbHandleDeleteRequest: function(result) {
    console.log(result);
    if(result.joinRequestDeleteOk) {
      this.refs.msgBox.clearErrors();
      this.refs.msgBox.addSuccess('Join request deleted successfully!', false);
      setTimeout(this.refs.msgBox.clearSuccesses, 3000);
      this.setState({
        member: 'false2'
      });

      var refreshData = {
        requestorId: VOICE.globals.userId,
        targetIds: [[this.state.memberships.targetId, this.props.targetType]]
      };
      
      VOICE.ajaxCall(VOICE.linkPrefix('api/groups/getMembershipInfo'), 'POST', refreshData, this, this.refreshData);
    }

    else {
      this.refs.msgBox.addError(result.errors);
      setTimeout(this.refs.msgBox.clearErrors, 5000);
    }
  },

  leaveGroup: function(urlString) {
    var url = VOICE.linkPrefix(urlString);
    VOICE.ajaxCall(url, 'POST', {}, this, this.cbHandleLeave);
  },

  cbHandleLeave: function(result) {
    console.log(result);
    if(result.leaveOk) {
      this.refs.msgBox.clearErrors();
      this.refs.msgBox.addSuccess('Leave request successful!', false);
      setTimeout(this.refs.msgBox.clearSuccesses, 3000);
      
      if(this.state.memberships.isGroupFreeToFollow !== '0') {
        this.setState({
          member: 'false1'
        });
      } else {
        this.setState({
          member: 'false2'
        });
      }
      
      var refreshData = {
        requestorId: VOICE.globals.userId,
        targetIds: [[this.state.memberships.targetId, this.props.targetType]]
      };
      
      VOICE.ajaxCall(VOICE.linkPrefix('api/groups/getMembershipInfo'), 'POST', refreshData, this, this.refreshData);
    }

    else {
      this.refs.msgBox.addError(result.errors);
      setTimeout(this.refs.msgBox.clearErrors, 5000);
    }
  },

  refreshData: function(result) {
    console.log('REFRESHED DATA: ', result);
    this.setState({
      memberships: result.getMemberships[0]
    });
  },

  acceptInvitation: function(urlString) {
    var url = VOICE.linkPrefix(urlString);
    VOICE.ajaxCall(url, 'POST', {}, this, this.cbHandleAcc);
  },

  cbHandleAcc: function(result) {
    console.log(result);
    if(result.answerInvitationJoinOk) {
      this.refs.msgBox.clearErrors();
      this.refs.msgBox.addSuccess('Invitation approved successfully!', false);
      setTimeout(this.refs.msgBox.clearSuccesses, 3000);
      this.setState({
        member: 'true1'
      });

      var refreshData = {
        requestorId: VOICE.globals.userId,
        targetIds: [[this.state.memberships.targetId, this.props.targetType]]
      };
      
      VOICE.ajaxCall(VOICE.linkPrefix('api/groups/getMembershipInfo'), 'POST', refreshData, this, this.refreshData);
    }

    else {
      this.refs.msgBox.addError(result.errors);
      setTimeout(this.refs.msgBox.clearErrors, 5000);
    }
  },

  rejectInvitation: function(urlString) {
    var url = VOICE.linkPrefix(urlString);
    VOICE.ajaxCall(url, 'POST', {}, this, this.cbHandleRej);
  },

  cbHandleRej: function(result) {
    console.log(result);
    if(result.answerInvitationJoinOk) {
      this.refs.msgBox.clearErrors();
      this.refs.msgBox.addSuccess('Invitation rejected!', false);
      setTimeout(this.refs.msgBox.clearSuccesses, 3000);
      if(this.state.memberships.isGroupFreeToFollow !== '0') {
        this.setState({
          member: 'false1'
        });
      } else {
        this.setState({
          member: 'false2'
        });
      }

      var refreshData = {
        requestorId: VOICE.globals.userId,
        targetIds: [[this.state.memberships.targetId, this.props.targetType]]
      };
      
      VOICE.ajaxCall(VOICE.linkPrefix('api/groups/getMembershipInfo'), 'POST', refreshData, this, this.refreshData);
    }

    else {
      this.refs.msgBox.addError(result.errors);
      setTimeout(this.refs.msgBox.clearErrors, 5000);
    }
  },

  render: function() {
     var req = this.state.memberships;
     console.log('REQQQQQQ: ', req);

     var cbJoin = this.joinGroup.bind(null, req.membershipLink);
     var cbRequestJoin = this.requestJoinGroup.bind(null, req.membershipLink);
     var cbLeave = this.leaveGroup.bind(null, req.membershipLink);
     var cbRequestDelete = this.deleteRequestJoinGroup.bind(null, req.membershipLink);

     var cbAcceptInvitation = this.acceptInvitation.bind(null, req.acceptInvitation);
     var cbRejectInvitation = this.rejectInvitation.bind(null, req.rejectInvitation);

     var style = ( this.props.inList ? { display: 'inline-block'} : null );
     
     return (
        <span>
          {
            VOICE.globals.userId !== req.targetId ?
              <div className="groupActionsDiv" style={style}>
                  {
                    this.state.member === 'false1' ? 
                      <button type="button" className="btn btn-default btn-lg btn-link" 
                        onClick={cbJoin}>
                          <span><i className="fa fa-sign-in fa-lg"></i> Follow Group</span>
                      </button> :
                    this.state.member === 'false2' ? 
                      <button type="button" className="btn btn-default btn-lg btn-link" 
                        onClick={cbRequestJoin}>
                          <span><i className="fa fa-sign-in fa-lg"></i> Request Join Group</span>
                      </button> :
                    this.state.member === 'false3' ? 
                      <button type="button" className="btn btn-default btn-lg btn-link" 
                        onClick={cbRequestDelete}>
                          <span><i className="fa fa-ban fa-lg"></i> Delete Join Request</span>
                      </button> :
                    this.state.member === 'false4' ? 
                    <span>
                      <button type="button" className="btn btn-default btn-sm btn-link" 
                        onClick={cbAcceptInvitation}>
                          <span><i className="fa fa-check fa-lg"></i> Accept Invitation Join</span>
                      </button>
                      <button type="button" className="btn btn-default btn-sm btn-link" 
                        onClick={cbRejectInvitation}>
                          <span><i className="fa fa-times fa-lg"></i> Reject Invitation Join</span>
                      </button>
                    </span> :
                    this.state.isAdmin === 'false' ?
                      <button type="button" className="btn btn-default btn-lg btn-link" 
                        onClick={cbLeave}>
                          <span><i className="fa fa-sign-out"></i> Leave Group</span>
                      </button> :
                      <span>
                        {
                          this.props.targetType !== 'OWN' ?
                            <span><a href={VOICE.linkPrefix('group/edit/'+req.targetId)}>
                              <i className="fa fa-pencil"></i> Edit Group
                            </a> - </span> : null
                        }
                        <a href={VOICE.linkPrefix('group/joinRequests/'+req.targetId)}>
                          <i className="fa fa-hand-paper-o"></i> Handle Join Requests
                        </a>
                      </span>
                  }
                  { !this.props.inList ? (
                    this.props.targetType === 'DIS' ?
                      <div>
                        <br/>
                        <GroupInvitationComp groupId={req.targetId} url={VOICE.linkPrefix('api/autoComplete/users')} isType="PRS"></GroupInvitationComp>
                      </div>
                      : 
                    (this.props.targetType === 'TEA' || this.props.targetType === 'OWN') && this.state.isAdmin === 'true' ?
                      <GroupInvitationComp groupId={req.targetId} url={VOICE.linkPrefix('api/autoComplete/users')} isType="PRS"></GroupInvitationComp>
                      : null
                    ) : null
                  }
                  <MessagesBoxComp ref="msgBox"/>
               </div> : null
           }
         </span>
      );
  }
}); //GroupActionsComp