<?php

class VO_Ideas {
	const _ECP = 'IDE';	// Error Code Prefix
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param VO_TblIdeas $obj	// Returns actually saved $obj if $fetchBack is set to true
	 * @param bool $fetchBack
	 * @return false | id
	 *
	 */
	public static
	function saveIdea( WOOOF $wo, VO_TblIdeas &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		$tblIdeas = new WOOOF_dataBaseTable($wo->db, 'ideas');
		if(!$tblIdeas->constructedOk) { return false; }
	
		if(!$wo->hasContent($obj->id)) {
			//insert
			$obj->effectiveDate = $wo->currentGMTDateTime();
				
			// insert new idea in ideas table
			$newId = $tblIdeas->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
		}
	
		else {
			//update
			$obj->effectiveDate = $wo->currentGMTDateTime();
			
			$updatedId = $tblIdeas->updateRowFromArraySimple( $obj->toArray() );
			if ( $updatedId === FALSE ) { return false; }
		}
	
		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
	
		return $obj->id;
	}	// saveIdea
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param VO_TblIdeaVersions $obj	// Returns actually saved $obj if $fetchBack is set to true
	 * @param bool $fetchBack
	 * @return false | id
	 *
	 */
	public static
	function saveIdeaVersion( WOOOF $wo, VO_TblIdeaVersions &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		$tblIdeaVersions = new WOOOF_dataBaseTable($wo->db, 'idea_versions');
		if(!$tblIdeaVersions->constructedOk) { return false; }
	
		if(!$wo->hasContent($obj->id)) {
			//insert
			$obj->fromDate = $wo->currentGMTDateTime();
	
			// insert new idea in ideas table
			$newId = $tblIdeaVersions->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
		}
	
		else {
			//update
			$obj->fromDate = $wo->currentGMTDateTime();
			
			$updatedId = $tblIdeaVersions->updateRowFromArraySimple( $obj->toArray() );
			if ( $updatedId === FALSE ) { return false; }
	
			$imgRes = $tblIdeaVersions->handlePictureUpload('ideaLogoImage', $obj->id);
			if($imgRes === FALSE) { return false; }
		}
	
		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
	
		return $obj->id;
	}	// saveIdeaVersion
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param VO_TblIdeaStatuses $obj	// Returns actually saved $obj if $fetchBack is set to true
	 * @param bool $fetchBack
	 * @return false | id
	 *
	 */
	public static
	function saveIdeaStatus( WOOOF $wo, VO_TblIdeaStatuses &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		$tblIdeaStatuses = new WOOOF_dataBaseTable($wo->db, 'idea_statuses');
		if(!$tblIdeaStatuses->constructedOk) { return false; }
	
		if(!$wo->hasContent($obj->id)) {
			//insert
			$obj->fromDate = $wo->currentGMTDateTime();
	
			// insert new idea in ideas table
			$newId = $tblIdeaStatuses->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
		}
	
		else {
			//update
			$obj->fromDate = $wo->currentGMTDateTime();
			
			$updatedId = $tblIdeaStatuses->updateRowFromArraySimple( $obj->toArray() );
			if ( $updatedId === FALSE ) { return false; }
		}
	
		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
	
		return $obj->id;
	}	// saveIdeaStatus
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param array $in
	 * @param id $groupId | '' -> mySelf
	 * @return false | id
	 * Returns actually saved $obj
	 */
	public static
	function createIdea( WOOOF $wo, $in, $groupId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  SaveIdea" );
		
		//first check if $groupId is mySelf
		if(!$wo->hasContent($groupId)) {
			//go and make a team to be the submitted team of the idea
			$tblGroupInsert = new VO_TblGroups();
			$tblGroupInsert->title = $in['title'] . ' - ' . $wo->app->voicePersonRow['VUS_slug'];
			$tblGroupInsert->description = $in['shortDescription'];
			$tblGroupInsert->comments = '';
			$tblGroupInsert->isActive = '1';
			$tblGroupInsert->isPrivate = '1';
			$tblGroupInsert->isFreeToFollow = '0';
			$tblGroupInsert->isOpenForPosts = '0';
			$tblGroupInsert->groupType = 'TEA';
				
			$groupIdToSave = VO_Groups::save($wo, $tblGroupInsert, $wo->app->userId);
			if($groupIdToSave === FALSE) { return false; }
				
			// create team action
			$usActId = VO_Users::saveAction(
				$wo, 'TEC', null, null,
				null, null, $groupIdToSave
			);
		}
		else {
			//check if the groupId i belong indeed to the group
			$checkGroupMembership = VO_Groups::isUserTeamMember($wo, $wo->app->userId, $groupId);
			if($checkGroupMembership === FALSE) { return false; }

			if($checkGroupMembership === '0') {
				$wo->logError(self::_ECP."3140 I am sorry it seems you are not a member of this team!");
				return false;
			}
			
			$groupIdToSave = $groupId;
		}
		
		//create new group to be the owner of the idea
		$tblGroupInsert = new VO_TblGroups();
		$tblGroupInsert->title = $in['title'] . ' - ' . $wo->app->voicePersonRow['VUS_slug'] . ' (owner)' . ' - ' . $groupIdToSave;
		$tblGroupInsert->description = $in['shortDescription'];
		$tblGroupInsert->comments = '';
		$tblGroupInsert->isActive = '1';
		$tblGroupInsert->isPrivate = '1';
		$tblGroupInsert->isFreeToFollow = '0';
		$tblGroupInsert->isOpenForPosts = '0';
		$tblGroupInsert->groupType = 'OWN';
		
		$ideaOwnerGroupId = VO_Groups::save($wo, $tblGroupInsert, $wo->app->userId);
		if($ideaOwnerGroupId === FALSE) { return false; }
		
		// create team action
		$usActId = VO_Users::saveAction(
			$wo, 'TEC', null, null,
			null, null, $ideaOwnerGroupId
		);
		
		//save the idea
		$ideaInsert = new VO_TblIdeas();
		$ideaInsert->ideaStatusDVCode = 'CRE';
		$ideaInsert->submittedByTeamId = $groupIdToSave;
		$ideaInsert->ownersGroupId = $ideaOwnerGroupId;
		$createdIdeaId = self::saveIdea($wo, $ideaInsert);
		if($createdIdeaId === FALSE) { return false; }
		
		//save the new idea version
		$ideaVersionInsert = new VO_TblIdeaVersions();
		$ideaVersionInsert->ideaId = $createdIdeaId;
		$ideaVersionInsert->versionString = '0.0.000';
		$ideaVersionInsert->versionName = '';
		$ideaVersionInsert->toDate = '';
		$ideaVersionInsert->title = $in['title'];
		$ideaVersionInsert->ideaTypeDVId = $in['ideaTypeDVId'];
		$ideaVersionInsert->shortDescription = $in['shortDescription'];
		$ideaVersionInsert->longDescription = '';
		$ideaVersionInsert->ideaLogoImage = '';
		$ideaVersionInsert->contentId = '';
		$ideaVersionInsert->voiceUserId = $wo->app->userId;
		$createdVersionIdeaId = self::saveIdeaVersion($wo, $ideaVersionInsert);
		if($createdVersionIdeaId === FALSE) { return false; }
		
		//SAVE THE NEW IDEA VERSION TO THE IDEA TABLE
		//////////////////////////////////////////////////////////
		$ideaRec = $wo->db->getRow('ideas', $createdIdeaId);
		if($ideaRec === FALSE) { return false; }
		if($ideaRec === NULL) {
			$wo->logError(self::_ECP."4444 No idea found to update");
			return false;
		}
			
		$ideaRec['currentVersionId'] = $createdVersionIdeaId;
		$tblIdeaUpdate = new VO_TblIdeas($ideaRec);
		$res = self::saveIdea($wo, $tblIdeaUpdate);
		if($res === FALSE) { return false; }
		
		//save the new idea status
		$ideaStatusInsert = new VO_TblIdeaStatuses();
		$ideaStatusInsert->ideaId = $createdIdeaId;
		$ideaStatusInsert->ideaStatusDVCode = 'CRE';
		$ideaStatusInsert->toDate = '';
		$ideaStatusInsert->comments = '';
		$createdStatusIdeaId = self::saveIdeaStatus($wo, $ideaStatusInsert);
		if($createdStatusIdeaId === FALSE) { return false; }
		
		// create idea action
		/*$usActId = VO_Users::saveAction(
			$wo, ($in['groupType']==='DIS' ? 'DGC' : 'TEC'), null, null,
			null, null, $res
		);*/
		
		return $res;
	}	// createIdea
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param string $ideaId
	 * @param string $userId
	 * @param string $versionName. Optional, may be empty
	 * @param unknown $newStatus. Optional, may be empty.
	 */
	public static
	function newVersion( WOOOF $wo, $ideaId, $userId, $versionName='', $newStatus='' )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$ideaId] [$userId] [$versionName] [$newStatus]" );
		
		// TODO: all of it

		// Checks
		// Check that $ideaId and $userId have values
		// Get Idea --> $currentIdeaRec
		// Check that $userId is member of the idea's owners group: isIdeaOwner( $ideaId, $userId)
		// If $newStatusDVCode has a value 
		// 		check that is valid (use the __v_domain_values view)
		//		later on: check that the transition is valid 
		
		// DOs
		
		// copy all the contents of the idea: VO_Ideas::copyContents( $ideaId, ... )
		//		'idea_other_contents' will be refreshed by this call
		//		the new id of the main content will be returned --> $newContentId

		// create new 'idea_versions' rec
		//		adjust versionString ( 1st level +1 if $newStatus has value, 2nd level +1 otherwise )
		//		provide new values for: contentId, voiceUserId, etc..

		// update current 'idea_versions' rec
		//		set the toDate to current GMT datetime
		
		// update 'ideas'
		//		currentVersionId <-- id from new 'idea_versions' above
		//		ideaStatusDVCode <-- $newStatus (if $newStatus has a value)
		
		// if $newStatus has a value
		//		"close" previous/last 'idea_statuses' record (fromDate)
		//		create new 'idea_statuses' record ...
		
		// return new version id
		
	}	// newVersion
	
} //VO_Ideas