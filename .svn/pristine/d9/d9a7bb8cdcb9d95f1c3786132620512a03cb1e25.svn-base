<?php

class VO_Social {
	const _ECP = 'SOC';	// Error Code Prefix
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param VO_TblUserFollow $obj
	 * @param bool $fetchBack
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static
	function saveUserFollow( WOOOF $wo, VO_TblUserFollow &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		 
		if ( !$wo->hasContent($obj->followsId) ) {
			$wo->logError(self::_ECP."1001 No value provided for [followsId]" );
			return false;
		}
		
		if ( !$wo->hasContent($obj->thisId) ) {
			$wo->logError(self::_ECP."1002 No value provided for [thisId]" );
			return false;
		}
		
		if($obj->followsId === $obj->thisId) {
			$wo->logError(self::_ECP."1003 Id's cannot be the same");
			return false;
		}
		
		$tblUserFollow = new WOOOF_dataBaseTable($wo->db, 'voice_user_followings');
		if($tblUserFollow === FALSE) { return false; }
		
		// insert
		$obj->createdDateTime = WOOOF::getCurrentDateTime();
		
		//Check for Peers
		$fromId = $obj->followsId;
		$toId = $obj->thisId;
		
		$res = $tblUserFollow->getResult(
			[
				'followsId' => $toId,
				'thisId'	=> $fromId
			],
			'', '', '', '', false, true
		);
		
		if ( $res === FALSE ) { return false; }
		
		$hasPeer = $res['totalRows'] != 0; 
		
		if(!$hasPeer) {
			$obj->isPeer = '0';
		}
		
		else {
			$obj->isPeer = '1';
			foreach( $tblUserFollow->resultRows as &$aRow ) {
				$aRow['isPeer'] = '1';
				$res = $tblUserFollow->updateRowFromResults($aRow['id']);
				if($res === FALSE) { return false; }
			}
		}
			
		$newId = $tblUserFollow->insertRowFromArraySimple( $obj->toArray() );
		if ( $newId === FALSE ) { return false; }
		$obj->id = $newId;
		
		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
			
		return $obj->id;
		
	}	// saveUserFollow
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param VO_TblUserFriendRequests $obj
	 * @param bool $fetchBack
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static
	function saveUserFriendRequests( WOOOF $wo, VO_TblUserFriendRequests &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		if ( !$wo->hasContent($obj->fromUserId) ) {
			$wo->logError(self::_ECP."1011 No value provided for [fromUserId]" );
			return false;
		}
			
		if ( !$wo->hasContent($obj->toUserId) ) {
			$wo->logError(self::_ECP."1012 No value provided for [toUserId]" );
			return false;
		}
			
		if($obj->fromUserId === $obj->toUserId) {
			$wo->logError(self::_ECP."1013 Id's cannot be the same");
			return false;
		}
			
		$tblFriendRequest = new WOOOF_dataBaseTable($wo->db, 'voice_user_friend_requests');
		if($tblFriendRequest === FALSE) { return false; }

		// insert
		$obj->statusDateTime = WOOOF::getCurrentDateTime();
		$obj->status = 'P';

		$newId = $tblFriendRequest->insertRowFromArraySimple( $obj->toArray() );
		if ( $newId === FALSE ) { return false; }
		$obj->id = $newId;

		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
			
		return $obj->id;
	
	}	// saveUserFriendRequests
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param VO_TblUserFriendships $obj
	 * @param bool $fetchBack
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static
	function saveUserFriendships( WOOOF $wo, VO_TblUserFriendships &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		if ( !$wo->hasContent($obj->thisId) ) {
			$wo->logError(self::_ECP."1021 No value provided for [thisId]" );
			return false;
		}
			
		if ( !$wo->hasContent($obj->isFriendsWithId) ) {
			$wo->logError(self::_ECP."1022 No value provided for [isFriendsWithId]" );
			return false;
		}
		
		if($obj->thisId === $obj->isFriendsWithId) {
			$wo->logError(self::_ECP."1003 Id's cannot be the same");
			return false;
		}

		$tblFriendship = new WOOOF_dataBaseTable($wo->db, 'voice_user_friendships');
		if($tblFriendship === FALSE) { return false; }
		
		$obj->createdDateTime = WOOOF::getCurrentDateTime();
			
		$newId = $tblFriendship->insertRowFromArraySimple( $obj->toArray() );
		if ( $newId === FALSE ) { return false; }
		$obj->id = $newId;

		return $obj->id;
	
	}	// saveUserFriendships
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $id for record to be deleted
	 * @return bool
	 */
	public static
	function deleteUserFollow( WOOOF $wo, $id )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
			
		if ( !$wo->hasContent($id) ) {
			$wo->logError(self::_ECP."1159 No value provided for [id]" );
			return false;
		}
		
		$tblUserFollow = new WOOOF_dataBaseTable($wo->db, 'voice_user_followings');
		if($tblUserFollow === FALSE) { return false; }
		
		$res = $tblUserFollow->deleteRow($id);
		if($res === FALSE) { return false; }
			
		return $id;
		
	}	// deleteUserFollow
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $id for record to be deleted
	 * @return bool
	 */
	public static
	function deleteUserFriendRequests( WOOOF $wo, $id )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
			
		if ( !$wo->hasContent($id) ) {
			$wo->logError(self::_ECP."1160 No value provided for [id]" );
			return false;
		}
	
		$tblFriendRequest = new WOOOF_dataBaseTable($wo->db, 'voice_user_friend_requests');
		if($tblFriendRequest === FALSE) { return false; }

		$res = $tblFriendRequest->deleteRow($id);
		if($res === FALSE) { return false; }
			
		return $id;
	
	}	// deleteUserFriendRequests
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $id for record to be deleted
	 * @return bool
	 */
	public static
	function deleteUserFriendships( WOOOF $wo, $id )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
			
		if ( !$wo->hasContent($id) ) {
			$wo->logError(self::_ECP."1161 No value provided for [id]" );
			return false;
		}
	
		$tblFriendship = new WOOOF_dataBaseTable($wo->db, 'voice_user_friendships');
		if($tblFriendship === FALSE) { return false; }

		$res = $tblFriendship->deleteRow($id);
		if($res === FALSE) { return false; }

		return $id;
	
	}	// deleteUserFriendships
	
	/***************************************************************************/
	//
	/***************************************************************************/
  
	/**
	 * 
	 * @param WOOOF $wo
	 * @param id $fromUserId
	 * @param id $toUserId
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static 
	function userFollows( WOOOF $wo, $fromUserId, $toUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		
		$tblUserFollowInsert = new VO_TblUserFollow();
		$tblUserFollowInsert->followsId = $fromUserId;
		$tblUserFollowInsert->thisId = $toUserId;
		
		$res = self::saveUserFollow($wo, $tblUserFollowInsert);
		if($res === FALSE) { return false; }
		
		return $res;
		
	}	// userFollows
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $fromUserId
	 * @param id $toUserId
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static
	function userUnFollows( WOOOF $wo, $fromUserId, $toUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		
		//Find the ID you want to delete
		$sql =  "select id ";
		$sql .=	"from voice_user_followings ";
		$sql .= "where followsId like '%$fromUserId%' and thisId like '%$toUserId%' ";
		
		$deleteRow = $wo->db->getResultByQuery($sql, true, false);
		if ( $deleteRow === FALSE ) { return FALSE; }
		
		$deleteRow = $wo->db->resultRows;
		
		foreach( $deleteRow as $aRow ) {
			$res = self::deleteUserFollow($wo, $aRow['id']);
			if($res === FALSE) { return false; }
		}
		
		//After the delete check if they were peers so as to update the isPeer value to '0'
		$sql =  "select * ";
		$sql .=	"from voice_user_followings ";
		$sql .= "where followsId like '%$toUserId%' and thisId like '%$fromUserId%' ";
		
		$rows = $wo->db->getResultByQuery($sql, true, false);
		if ( $rows === FALSE ) { return FALSE; }
		
		$rows = $wo->db->resultRows;
		
		foreach( $rows as $aRow ) {
			$tblUserFollowUpdate = new VO_TblUserFollow($aRow);
			$tblUserFollowUpdate->isPeer = '0';
			$tblUserFollow = new WOOOF_dataBaseTable($wo->db, 'voice_user_followings');
			if($tblUserFollow === FALSE) { return false; }
			$res = $tblUserFollow->updateRowFromArraySimple( $tblUserFollowUpdate->toArray() );
			if($res === FALSE) { return false; }
		}
		
		return $res;
	
	}	// userUnFollows
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $fromUserId
	 * @param id $toUserId
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static
	function userRequestFriendship( WOOOF $wo, $fromUserId, $toUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		$tblUserFriendRequest = new VO_TblUserFriendRequests();
		$tblUserFriendRequest->fromUserId = $fromUserId;
		$tblUserFriendRequest->toUserId = $toUserId;
		
		$res = self::saveUserFriendRequests($wo, $tblUserFriendRequest);
		if($res === FALSE) { return false; }
		
		return $res;
	
	}	// userRequestFriendship
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $requestId
	 * @param char $reply ('A' accept, 'R' reject)
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static
	function userAnswerFriendShip( WOOOF $wo, $requestId, $reply )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		//TODO
		
		// Find the request in the table
		$friendRequest = $wo->db->getRow('voice_user_friend_requests', $requestId);
		if($friendRequest === FALSE) { return false; }
		if($friendRequest === NULL) {
			$wo->logError(self::_ECP."1355 No row with id [$requestId] found!");
			return false;
		}
		
		//If rejected then update status and statusdatetime
		if($reply === "R") {
			$tblFriendRequestUpdate = new VO_TblUserFriendRequests($friendRequest);
			
			$tblFriendRequestUpdate->status = $reply;
			$tblFriendRequestUpdate->statusDateTime = WOOOF::getCurrentDateTime();
			
			$res = self::saveUserFriendships($wo, $tblFriendRequestUpdate, 'friendRequest');
			if($res === FALSE) { return false; }
		}
		
		//If request accepted then delete the friend request row and update the voice_user_friendships table
		else if($reply === "A") {
			//update the friendships table add it there as friendship
			$tblFriendshipsInsert = new VO_TblUserFriendships();
			$tblFriendshipsInsert->thisId = $friendRequest['fromUserId'];
			$tblFriendshipsInsert->isFriendsWith = $friendRequest['toUserId'];
			
			$friendInsert = self::save($wo, $tblFriendshipsInsert, 'friendship');
			if($friendInsert === FALSE) { return false; }
			
			//delete the request from friend_requests table
			$deleteReq = self::deleteUserFriendRequests($wo, $requestId);
			if($deleteReq === FALSE) { return false; }
		}
		
		else {
			return false;
		}
	}	// userAnswerFriendShip
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $fromUserId
	 * @param id $toUserId
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static
	function userDeleteFriendShip( WOOOF $wo, $fromUserId, $toUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	
		//Find the ID you want to delete
		$sql =  "select id ";
		$sql .=	"from voice_user_friend_requests ";
		$sql .= "where fromUserId like '%$fromUserId%' and toUserId like '%$toUserId%' ";
	
		$deleteFriendShip = $wo->db->getResultByQuery($sql, true, false);
		if ( $deleteFriendShip === FALSE ) { return FALSE; }
	
		$deleteFriendShip = $wo->db->resultRows;
	
		foreach( $deleteFriendShip as $aRow ) {
			$res = self::deleteUserFriendships($wo, $aRow['id']);
			if($res === FALSE) { return false; }
		}
	
		return $res;
	
	}	// userDeleteFriendShip
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @return false | array[ ]
	 */
	public static
	function getFollowers( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  $voiceUserId" );
		
		if(!$wo->hasContent($voiceUserId)) {
			$wo->logError(self::_ECP."2222 You must provide a [voiceUserId]");
			return false;
		}
		
		$followers = []; //array to be sent to react element
		$followerElems = ['id', 'createdDateTime', 'followsId', 'thisId', 'isPeer'];
	
		$voiceUserFollowers = new WOOOF_dataBaseTable($wo->db, 'voice_user_followings');
		if ( !$voiceUserFollowers->constructedOk ) { return false; }
	
		$res = $voiceUserFollowers->getResult(
			[
				'thisId' => $voiceUserId
			],
			'createdDateTime',
			'', '', '',
			true, false
		);
		if ( $res === FALSE ) { return false; }
	
		if ( $res['totalRows'] != 0 ) {
			foreach($voiceUserFollowers->resultRows as $v_follower) {
				$follower = [];
				WOOOF_Util::filterOnKeys($follower, $followerElems, $v_follower);
				array_push($followers, $follower);
			}
		}
	
		return $followers;
	} //getFollowers
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @return false | array[ ]
	 */
	public static
	function getFollowings( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  $voiceUserId" );
	
		if(!$wo->hasContent($voiceUserId)) {
			$wo->logError(self::_ECP."2223 You must provide a [voiceUserId]");
			return false;
		}
		
		$followings = []; //array to be sent to react element
		$followingElems = ['id', 'createdDateTime', 'followsId', 'thisId', 'isPeer'];
	
		$voiceUserFollowings = new WOOOF_dataBaseTable($wo->db, 'voice_user_followings');
		if ( !$voiceUserFollowings->constructedOk ) { return false; }
	
		$res = $voiceUserFollowings->getResult(
			[
				'followsId' => $voiceUserId
			],
			'createdDateTime',
			'', '', '',
			true, false
		);
		if ( $res === FALSE ) { return false; }
	
		if ( $res['totalRows'] != 0 ) {
			foreach($voiceUserFollowings->resultRows as $v_following) {
				$following = [];
				WOOOF_Util::filterOnKeys($following, $followingElems, $v_following);
				array_push($followings, $following);
			}
		}
	
		return $followings;
	} //getFollowings
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @return false | array[ ]
	 */
	public static
	function getPeers( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  $voiceUserId" );
		
		if(!$wo->hasContent($voiceUserId)) {
			$wo->logError(self::_ECP."2224 You must provide a [voiceUserId]");
			return false;
		}
	
		$peers = []; //array to be sent to react element
		$peerElems = ['id', 'createdDateTime', 'followsId', 'thisId', 'isPeer'];
	
		$voiceUserPeers = new WOOOF_dataBaseTable($wo->db, 'voice_user_followings');
		if ( !$voiceUserPeers->constructedOk ) { return false; }
	
		$sql =  "select * ";
		$sql .=	"from voice_user_followings ";
		$sql .= "where followsId like '%$voiceUserId%' and isPeer='1' ";
	
		$peerRows = $wo->db->getResultByQuery($sql, true, false);
		if ( $peerRows === FALSE ) { return FALSE; }
	
		$peerRows = $wo->db->resultRows;
	
		foreach( $peerRows as $aPeerRow ) {
			$peer = [];
			WOOOF_Util::filterOnKeys($peer, $peerElems, $aPeerRow);
			array_push($peers, $peer);
		}
	
		return $peers;
	} //getPeers
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $voiceUserId
	 * @return false | array[ ]
	 */
	public static
	function getFriends( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  $voiceUserId" );
		
		if(!$wo->hasContent($voiceUserId)) {
			$wo->logError(self::_ECP."2225 You must provide a [voiceUserId]");
			return false;
		}
	
		$friends = []; //array to be sent to react element
		$friendElems = ['id', 'createdDateTime', 'thisId', 'isFriendsWithId'];
	
		$voiceUserFriends = new WOOOF_dataBaseTable($wo->db, 'voice_user_friendships');
		if ( !$voiceUserFriends->constructedOk ) { return false; }
	
		$sql =  "select * ";
		$sql .=	"from voice_user_friendships ";
		$sql .= "where thisId like '%$voiceUserId%' or isFriendsWithId like '%$voiceUserId%' ";
		
		$friendRows = $wo->db->getResultByQuery($sql, true, false);
		if ( $friendRows === FALSE ) { return FALSE; }
		
		$friendRows = $wo->db->resultRows;
		
		foreach( $friendRows as $aFriendRow ) {
			$friend = [];
			WOOOF_Util::filterOnKeys($friend, $friendElems, $aFriendRow);
			array_push($friends, $friend);
		}
	
		return $friends;
	} //getFriends
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $requestorUserId
	 * @param array $targetIds
	 * @return false | array[ ]
	 */
	public static
	function getConnectionInfo( WOOOF $wo, $requestorUserId, $targetIds )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  $requestorUserId" );
	
		if(!$wo->hasContent($requestorUserId)) {
			$wo->logError(self::_ECP."2235 You must provide a [requestorUserId]");
			return false;
		}
		
		if(!$wo->hasContent($targetIds)) {
			$wo->logError(self::_ECP."2236 You must provide [targetIds]");
			return false;
		}
	
		$voiceUserFollowStats = new WOOOF_dataBaseTable($wo->db, 'voice_user_followings');
		if ( !$voiceUserFollowStats->constructedOk ) { return false; }
		
		$voiceUserFriendStats = new WOOOF_dataBaseTable($wo->db, 'voice_user_friendships');
		if ( !$voiceUserFriendStats->constructedOk ) { return false; }
		
		$voiceUserFriendRequestsStats = new WOOOF_dataBaseTable($wo->db, 'voice_user_friend_requests');
		if ( !$voiceUserFriendRequestsStats->constructedOk ) { return false; }
	
		$statuses = [];
		
		foreach ($targetIds as $aTarget) {
			$status = [];
			
			// BUILD followStatus array
			
			// First check if the requestor follows the target user
			$follower = $voiceUserFollowStats->getResult(
				[
					'followsId' => $requestorUserId,
					'thisId'	=> $aTarget
				],
				'', '', '', '', false, true
			);
			
			if ( $follower === FALSE ) { return false; }
			
			$requestorFollowsTarget = $follower['totalRows'] != 0;
			
			// Then check if the target user follows the requestor
			$following = $voiceUserFollowStats->getResult(
				[
					'followsId' => $aTarget,
					'thisId'	=> $requestorUserId
				],
				'', '', '', '', false, true
			);
				
			if ( $following === FALSE ) { return false; }
				
			$targetFollowingRequestor = $following['totalRows'] != 0;
			
			//noone follows anyone
			if(!$requestorFollowsTarget && !$targetFollowingRequestor) {
				$status['followStatus'] = 'N';
				$status['followLink'] = 'api/social/followUser/'.$aTarget;
			}
			
			//requestor does follow target
			else if($requestorFollowsTarget && !$targetFollowingRequestor) {
				$status['followStatus'] = 'F1';
				$status['followLink'] = 'api/social/unFollowUser/'.$aTarget;
			}
			
			//target follows requestor
			else if(!$requestorFollowsTarget && $targetFollowingRequestor) {
				$status['followStatus'] = 'F2';
				$status['followLink'] = 'api/social/followUser/'.$aTarget;
			}
			
			//peers
			else if($requestorFollowsTarget && $targetFollowingRequestor) {
				$status['followStatus'] = 'P';
				$status['followLink'] = 'api/social/unFollowUser/'.$aTarget;
			}
			
			// BUILD friendStatus array
				
			// First check if the requestor is friend with the targetId
			$sql =  "select id ";
			$sql .=	"from voice_user_friendships ";
			$sql .= "where (thisId = '$requestorUserId' and isFriendsWithId = '$aTarget') or (thisId = '$aTarget' and isFriendsWithId = '$requestorUserId') ";
			
			$rows = $wo->db->getResultByQuery($sql, true, false);
			if ( $rows === FALSE ) { return FALSE; }
			
			$rows = $wo->db->resultRows;
			
			if(!$wo->hasContent($rows)) {
				$isFriendsWith = false;
			}
			
			else {
				$isFriendsWith = true;
			}
			
			//Then check for any friend requests between them
			$madeRequest = $voiceUserFriendRequestsStats->getResult(
				[
					'fromUserId' => $requestorUserId,
					'toUserId'	=> $aTarget
				],
				'', '', '', '', false, true
			);
				
			if ( $madeRequest === FALSE ) { return false; }
				
			$requestorFriendedTarget = $madeRequest['totalRows'] != 0;
			
			$gotRequested = $voiceUserFriendRequestsStats->getResult(
				[
					'fromUserId' => $aTarget,
					'toUserId'	=> $requestorUserId
				],
				'', '', '', '', false, true
			);
			
			if ( $gotRequested === FALSE ) { return false; }
			
			$targetFriendedRequestor = $gotRequested['totalRows'] != 0;
			
			//they are friends
			if($isFriendsWith) {
				$status['friendStatus'] = 'Y';
				$status['friendLink'] = 'api/social/deleteFriendship';
			}
			
			else {
				//no friends - no requests
				if(!$requestorFriendedTarget && !$targetFriendedRequestor) {
					$status['friendStatus'] = 'N';
					$status['friendLink'] = 'api/social/requestFriendship/'.$aTarget;
				}
				
				//requestor did a pending requested
				else if($requestorFriendedTarget && !$targetFriendedRequestor) {
					$status['friendStatus'] = 'R1';
					$status['friendLink'] = '';
				}
				
				//target follows requestor
				else if(!$requestorFriendedTarget && $targetFriendedRequestor) {
					$status['friendStatus'] = 'R2';
					$status['friendLinkAccept'] = 'api/social/answerFriendship/'.$aTarget.'/A';
					$status['friendLinkReject'] = 'api/social/answerFriendship/'.$aTarget.'/R';
				}	
			}
			
			$statuses[$aTarget] = $status;
		}
	
		return $statuses;
	} //getConnectionInfo
	
	
}	// VO_SOCIAL