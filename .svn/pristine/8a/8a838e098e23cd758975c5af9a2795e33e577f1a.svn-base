import React from 'react';
import ReactDom from 'react-dom';
import $ from 'jquery';
var RB = require('react-bootstrap');

import MessagesBoxComp from './MessagesBoxComp';
import AddressesBoxComp from './AddressesBoxComp';

import YearInputComp from './YearInputComp.jsx';

export default React.createClass({ //ProfileEdit
  
  getInitialState: function() {
  	console.log('Initial State for educations: ');
  	console.log(this.props.lookUps);
    return {
    	data: {
    	   main : this.props.data.main,
    	   addresses : this.props.data.addresses,
    	   education: this.props.data.educations,
    	   /*experience : [
    	       {
    	    	   position: 'Software Developer',
    	    	   relationType: 'employed by',
    	    	   comments: '',
    	    	   fromYear: '',
    	    	   toYear: ''
    	       }
    	   ],*/
    	   skills : []
		}
    };
  },
  
  render: function() { //function that returns a tree of React components that will eventually render to HTML
    return (
      <div className="profileBox">
          <Main data={this.state.data.main} lookUps= {this.props.lookUps} />
          <AddressesBoxComp data={this.state.data.addresses} lookUps= {this.props.lookUps} />
          <Education data={this.state.data.education} lookUps= {this.props.lookUps} />
          <Skills data={this.state.data.skills} />
          <Experience data={this.state.data.experience} />
      </div>
    );
  }
  
});	// ProfileBox

/*************************************************************************************************************/

var Main = React.createClass({
  getInitialState: function() {
    var tmpMainView = this.props.data; //for reseting purposes
    this.initialState = JSON.stringify(tmpMainView);
  
    return {
	  mainView: tmpMainView
    };
  },
  
  handleChange: function(event) {
	  var tmp = this.state.mainView;
	  tmp[event.target.name] = event.target.value;
	  
	  this.setState({
		  mainView: tmp
	  });
  },
  
  handleReset: function() {
	  var resetView = JSON.parse(this.initialState);
	  this.setState({mainView: resetView});
  },
  
  handleSave: function(e) {
	  e.preventDefault();

	  var fd = new FormData(); //api ths javascript

	  var data = this.state.mainView;
	  
	  if(ReactDOM.findDOMNode(this.refs.cvFile).value !== '') {
	  	fd.append('cvFile', ReactDOM.findDOMNode(this.refs.cvFile).files[0]);
	  }

	  if(ReactDOM.findDOMNode(this.refs.avatarImg).value !== '') {
	  	fd.append('avatarImg', ReactDOM.findDOMNode(this.refs.avatarImg).files[0]);
	  }
	  	

	  fd.append('data', JSON.stringify(data));
	  
	  var url = VOICE.linkPrefix('api/profile/mainInfoSave');
	  //data to send to server!
	  VOICE.ajaxCallWithFiles(url, 'POST', fd, this, this.cbHandleSave);
  },

  cbHandleSave: function(result) {
  	console.log(result);
  	if(result.saveOk === true) {
  		// if successully saved
  		var data = this.state.mainView;
  		data.avatarImgObject = result.avatarImg;
	    data.cvFileObject = {
	    	externalFileId: result.cvFile.externalFileId,
	    	fileName: result.cvFile.fileName,
	    	originalFileName: result.cvFile.originalFileName
	    };
	    this.initialState = JSON.stringify(this.state.mainView);
	    this.setState({mainView: data});
  		this.refs.msgBox.clearErrors();
	  	this.refs.msgBox.addSuccess('Your information was saved successully!', false);
	  	setTimeout(this.refs.msgBox.clearSuccesses, 3000);
  	}
  	else {
  		this.refs.msgBox.addError(result.errors);
  	}
  },

  render: function() {
	var mainInfo = this.state.mainView;
	console.log('Main view: ');
	console.log(mainInfo.personTitleDVId);
	var avatarImg = mainInfo.avatarImgObject || 'profile_none.png';
	var avatarURL = '';
	if(avatarImg !== 'profile_none.png') {
		avatarURL = VOICE.imgPrefix(avatarImg);
	}
	else {
		avatarURL = VOICE.systemImgPrefix(avatarImg);
	}
	//console.log(mainInfo.avatarImgObject.fileName);
	var avatarDivStyle = {
		backgroundImage: 'url(' + avatarURL + ')'
	};
	var cvFileURL = VOICE.filePrefix(mainInfo.cvFileObject.externalFileId);

	var male;
	if (mainInfo.gender === 'M') 
		male = true; 
	else 
		male=false;
	
    return (
	  <RB.Well>
	  	<center><h3><a href={VOICE.linkPrefix('profile/view')}>View Profile</a></h3></center>
	    <RB.Row>
			<RB.Col md={12}>
				<a href={avatarURL} target="_blank">
					<div className="circle" style={avatarDivStyle}></div>
				</a>
				<center>
					<label>
						<i className="fa fa-camera"></i>
					</label>
		  			<input type="file" id="input-1" ref="avatarImg" name="avatarImg" />
				</center>
			</RB.Col>
		</RB.Row><br/>
      	<RB.Row>
      		<RB.Col md={4}>
				<RB.Input type="text" addonBefore="First Name (*)" placeholder="Your First Name..." value={mainInfo.firstName} ref="firstName" name="firstName" onChange={this.handleChange} />
			</RB.Col>
			<RB.Col md={4}>
				<RB.Input type="text" addonBefore="Middle Name" placeholder="Your Middle Name..." value={mainInfo.middleName} ref="middleName" name="middleName" onChange={this.handleChange} />
			</RB.Col>
			<RB.Col md={4}>
				<RB.Input type="text" addonBefore="Last Name (*)" placeholder="Your Last Name..." value={mainInfo.lastName} ref="lastName" name="lastName" onChange={this.handleChange} />
			</RB.Col>
		</RB.Row><br/>
		<RB.Row>
			<RB.Col md={2} mdOffset={1}>
				<RB.Input type="radio" label="Male" name="gender" ref="gender" checked={male ? 'checked' : null} value="M" onChange={this.handleChange} />
				<RB.Input type="radio" label="Female" name="gender" ref="gender" checked={!male ? 'checked' : null} value="F" onChange={this.handleChange} />
			</RB.Col>
			<RB.Col md={3}  mdOffset={1}>
			    <YearInputComp placeholder="Select Year of Birth" addonBefore="Birth Year" ref="birthYear" name="birthYear" min={1980} max={2015} value={mainInfo.birthYear} onChange={this.handleChange} ></YearInputComp>
			</RB.Col>
  			<RB.Col md={3}  mdOffset={1}>
				<RB.Input type="select" addonBefore="Title" value={mainInfo.personTitleDVId} placeholder="Select Title" ref="personTitleDVId" name="personTitleDVId" onChange={this.handleChange}>
					<option value=""> - Select Title - </option>
					{VOICE.renderOptions(this.props.lookUps.PERSON_TITLE)}
			    </RB.Input>
			</RB.Col>
		</RB.Row><br/>
		<RB.Row>
			<RB.Col md={12}>
  				<RB.Input type="textarea" rows="7" value={mainInfo.shortDescription} addonBefore="Short Description" ref="shortDescription" name="shortDescription" placeholder="Write something about you..." onChange={this.handleChange}></RB.Input> 
			</RB.Col>
		</RB.Row><br/>
		<RB.Row>
			<center>
				<RB.Col md={12}>
	  				<label>
						<i className="fa fa-file"> CV File: <a href={cvFileURL} target="_blank">{mainInfo.cvFileObject.originalFileName}</a></i>
					</label>
					<input type="file" id="input-2" ref="cvFile" name="cvFile" />
				</RB.Col>
			</center>
		</RB.Row><br/>
		<RB.Row>
			<RB.Col md={1} mdOffset={5}>
				<RB.Button bsStyle="success" onClick={this.handleSave}><i className="glyphicon glyphicon-ok-sign"></i> Save</RB.Button>
			</RB.Col>
			<RB.Col md={1}>
				<RB.Button onClick={this.handleReset}><i className="glyphicon glyphicon-repeat"></i> Reset</RB.Button>
			</RB.Col>
		</RB.Row><br/>
		<RB.Row>
			<RB.Col md={12}>
				<MessagesBoxComp ref="msgBox"/>
			</RB.Col>
		</RB.Row>
      </RB.Well>
    );
  }
});	// Main

/*************************************************************************************************************/

// TODO: put in separate files!!!!
//

/*************************************************************************************************************/

var Education = React.createClass({
	
  initObject: function(data) {
  	  var tmp = {}; //for reseting purposes
	  
	  for(var i=0; i<data.length; i++) {
		  var temp = data[i];
		  temp._status = 'R';
		  tmp[ data[i].id ] = temp;
	  }

	  return tmp;
  },

  getInitialState: function() {
  	  console.log('Initial State Education: ');
  	  console.log(this.props.data);
	  
  	  var tmp = this.initObject(this.props.data);
	  
	  this.initialState = JSON.stringify(tmp);
	  
	  return {
		  education: tmp,
		  showEducationForm: false,
		  showAddButton: true,
		  showSaveEduButton: true
	  };
  },
  
  handleSave: function(e) {
	  e.preventDefault();
	  
	  //TAKE OUT the TRASH ("_status = T") before send to server
	  for (var key in this.state.education) {
		  if (this.state.education.hasOwnProperty(key)) {
		  //Now, this.state.addresses[key] is the current value of the address object
			  if (this.state.education[key]._status === 'T') {
				  delete this.state.education[key]
			  }
		  }
	  }

	  //console.log(this.state.addresses); //this will be send to server via AJAX (all except the trash - T which are inserted and deleted at once without being saved)
	  var url = VOICE.linkPrefix('api/profile/saveEducations');
	  //data to send to server!
	  VOICE.ajaxCall(url, 'POST', this.state.education, this, this.cbHandleSave);
  },

  cbHandleSave: function(result) {
  	console.log(result);
  	if(result.saveOk === true) {
  		this.refs.msgBox.clearErrors();
	  	this.refs.msgBox.addSuccess('Your educations were saved successully!', false);
	  	setTimeout(this.refs.msgBox.clearSuccesses, 3000);

	  	for (var key in this.state.education) {
		  if (this.state.education.hasOwnProperty(key)) {
		  //Now, this.state.education[key] is the current value of the address object
			  if (this.state.education[key]._status === 'D') {
				  delete this.state.education[key]
			  }
		  }
	    }

	    //After send to server update the status of all inserted to "R" from "I" OR "U"
	  	for (var edu in this.state.education) {
	     if (this.state.education.hasOwnProperty(edu)) {
	         var obj = this.state.education[edu];
	          for (var prop in obj) {
	            // important check that this is objects own property 
	            // not from prototype prop inherited
	            if(obj.hasOwnProperty(prop)){
	              if(prop === '_status' && (obj[prop] === 'I' || obj[prop] === 'U')) {
	            	  obj[prop] = 'R';  	
	              }
	            }
	         }
	      }
	    }
	  
 		var url = VOICE.linkPrefix('api/profile/getEducations');

	    VOICE.ajaxCall(url, 'GET', {}, this, this.cbHandleSaveEducation);
  	}
  	else {
		this.refs.msgBox.addError(result.errors);
  	}
  },

  cbHandleSaveEducation: function(result) {
  		var tmp = this.initObject(result);
  		this.initialState = JSON.stringify(tmp);
	    this.setState({education: tmp});
  },
  
  handleReset: function() {
	  var resetView = JSON.parse(this.initialState);
	  this.setState({education: resetView});
  },
  
  handleEducationSubmit: function(newEducation) {
	var education = this.state.education;
	var id = Math.floor((Math.random() * 10000000000) + 1000000000);
	newEducation.id = id;
	education[id] = newEducation;
	
	this.setState({
		education: education,
		showEducationForm: false,
		showAddButton: true,
		showSaveEduButton: true
	});
  },
  
  handleChange: function(educationId, event) {
  	  // educationId is passed from caller!

	  var exists = false, 
	  	  newEducation = this.state.education;
	  
	  exists = this.state.education.hasOwnProperty(educationId);
	  if(exists) {
	  	   /*if(event.constructor.name === 'Moment') {
	  	   		newEducation[educationId][event.target.name] = event.format(VOICE.globals.dateF);
	  	   }*/
		   newEducation[educationId][event.target.name] = event.target.value;
	  }
	  else {
		  var tempObj = {};
		  tempObj['id'] = educationId;
		  tempObj[event.target.name] = event.target.value;
		  
		  newEducation[educationId] = tempObj;
	  }
	  
	  if(newEducation[educationId]._status !== 'I') {
	      // Insertions remain insertions even after (re)editing them.
		  newEducation[educationId]._status = 'U';
	  }
	  
	  this.setState({
		  education: newEducation
	  });
  },
  
  onPlusClick: function() {
	  this.setState({ 
		  showEducationForm: true,
		  showAddButton: false,
		  showSaveEduButton: false
	  });  
  },
  
  onDeleteClick: function(educationId, event) {
  	  // educationId is passed from caller!
	  
	  if(this.state.education[educationId]._status === 'I') {
		  this.state.education[educationId]._status = 'T'; //trash status (inserted and then updated)
	  }
	  else {
		  this.state.education[educationId]._status = 'D'; //update status
	  }
	  
	  this.setState({
		  education: this.state.education
	  }); //update view
	  
  },
  
  handleCancelClick: function(newView) {
    this.setState(newView);
  },

  render: function() {
	var tds = [];
	var keys = Object.keys(this.state.education);
	console.log('Rendering with EDU: ');
	console.log(this.state.education);
	for(var i=0; i < keys.length; i++ ) {
		var edu = this.state.education[keys[i]];

		// partial call to callback. Pass edu.id as parameter
		var cb1  = this.handleChange.bind(null,edu.id);
		console.log(edu.fromYear);
		tds.push(
			<tr key={edu.id} id={edu.id} className={(edu._status === 'D' || edu._status === 'T') ? 'hidden' : null}>
				<td>
					<select className="form-control" value={edu.degreeTypeDVId} ref="degreeTypeDVId" name="degreeTypeDVId" onChange={cb1} >
					    {VOICE.renderOptions(this.props.lookUps.DEGREE_TYPE)}
				    </select>
				</td>
				<td><input type="text" className="form-control" value={edu.title} ref="title" name="title" onChange={cb1} /></td>
				<td>
					<YearInputComp className="form-control" placeholder="Select From Year..." ref="fromYear" name="fromYear" min={1960} max={2015} value={edu.fromYear} onChange={cb1} ></YearInputComp>
				</td>
				<td>
					<YearInputComp className="form-control" placeholder="Select To Year..." ref="toYear" name="toYear" min={1960} max={2015} value={edu.toYear} onChange={cb1} ></YearInputComp>
				</td>
				<td><a href="javascript:void(0)"><i className="fa fa-ban" data-education-id={edu.id} onClick={this.onDeleteClick.bind(null, edu.id)}></i></a></td>
			</tr>
		);
	}
	
    return (
      <div className="well well-large formInlineStyle">
	  	<div className="panel panel-default">
		  <div className="panel-heading">
		  	My Education
		  	<span id="addEducation">{ this.state.showAddButton ? <a href="javascript:void(0)"><i className="fa fa-plus-circle" onClick={this.onPlusClick}></i></a> : null }</span>
		  </div>
	  		  <div className="table-responsive">
				  <table className="table table-hover">
					<thead>
						<tr>
						    <th>Degree Type</th>
						    <th>Title</th>
						    <th>From Year</th>
						    <th>To Year</th>
						    <th>Options</th>
					    </tr>
					</thead>
					<tbody>
					    {tds}
					</tbody>
				  </table>
			  </div>
		  </div>
		  <div className="row">
			  <div className="col-md-1 col-md-offset-5">
			    { this.state.showSaveEduButton ? <button type="button" className="btn btn-success" onClick={this.handleSave}><i className="glyphicon glyphicon-ok-sign"></i> Save</button> : null }
			  </div>
			  <div className="col-md-1">
			    { this.state.showSaveEduButton ? <button type="button" className="btn btn-default" onClick={this.handleReset}><i className="glyphicon glyphicon-repeat"></i> Reset</button> : null }
			  </div>
		  </div><br/>
		  <br/>
		  <div className="row">
		  	<div className="col-md-12">
		  		<MessagesBoxComp ref="msgBox"/>
		  	</div>
		  </div>
		  <div className="row">
		  	<div className="col-md-12">
		  		{ this.state.showEducationForm ? <EducationForm {...this.props} onEducationSubmit={this.handleEducationSubmit} onCancelClick={this.handleCancelClick} /> : null }
		  	</div>
		  </div>
      </div>
	  
    );
  }
});	// Educations

/*************************************************************************************************************/

var EducationForm = React.createClass({

  handleSubmit: function(e) {
    e.preventDefault();
    var degreeTypeForm = ReactDOM.findDOMNode(this.refs.degreeTypeForm).value.trim();
    var organisationIdForm = ReactDOM.findDOMNode(this.refs.organisationIdForm).value.trim();
    var titleForm = ReactDOM.findDOMNode(this.refs.titleForm).value.trim();
    var fromYearForm = this.refs.fromYear.getValue();
    var toYearForm = this.refs.toYear.getValue();
    console.log(this.fromYear, this.toYear);
    console.log(fromYearForm, toYearForm);
    if (!degreeTypeForm || !titleForm) {
    	alert('Please fill all the required input fields!');
        return;
    }
    
	this.props.onEducationSubmit({
		degreeTypeDVId: degreeTypeForm,
		organisationId: organisationIdForm,
		title: titleForm,
		fromYear: fromYearForm,
		toYear: toYearForm,
		_status: 'I'
	});
	
    ReactDOM.findDOMNode(this.refs.degreeTypeForm).value = '';
    ReactDOM.findDOMNode(this.refs.organisationIdForm).value = '';
    ReactDOM.findDOMNode(this.refs.titleForm).value = '';
    return;
  },
  
  handleCancel: function() {
	ReactDOM.findDOMNode(this.refs.degreeTypeForm).value = '';
    ReactDOM.findDOMNode(this.refs.organisationIdForm).value = '';
    ReactDOM.findDOMNode(this.refs.titleForm).value = '';
	
	this.props.onCancelClick({
		showEducationForm: false,
		showAddButton: true,
		showSaveEduButton: true
	});
	
	return;
  },
  
  render: function() {
    return (
	  <form className="educationForm">
	    <div className="row">
			<div className="col-md-4">
				<div className="input-group">
					<span className="input-group-addon" id="basic-addon-5">Degree Type (*)</span>
					<select className="form-control" aria-describedby="basic-addon-5" ref="degreeTypeForm">
						<option value="">- Please Choose -</option>
					    {VOICE.renderOptions(this.props.lookUps.DEGREE_TYPE)}
				    </select>
			    </div>
			</div>
			<div className="col-md-4">
				<div className="input-group">
					<span className="input-group-addon" id="basic-addon-13">Title (*)</span>
					<input type="text" className="form-control" placeholder="Title..." aria-describedby="basic-addon-13" ref="titleForm" />
				</div>
			</div>
			<div className="col-md-4">
				<div className="input-group">
					<span className="input-group-addon" id="basic-addon-10">Organisation</span>
					<select className="form-control" aria-describedby="basic-addon-5" ref="organisationIdForm">
						<option value="">- Please Choose -</option>
					    {VOICE.renderOptions(this.props.lookUps.AREA)}
				    </select>
				</div>
			</div>
		</div><br/>
		<div className="row">
			<div className="col-md-6">
				<div className="input-group">
					<span className="input-group-addon" id="basic-addon-14">From Year</span>
					<YearInputComp className="form-control" placeholder="Select From Year..." ref="fromYear" min={1960} max={2015} ></YearInputComp>
				</div>
			</div>
			<div className="col-md-6">
				<div className="input-group">
					<span className="input-group-addon" id="basic-addon-15">To Year</span>
					<YearInputComp className="form-control" placeholder="Select To Year..." ref="toYear" min={1960} max={2015} ></YearInputComp>
				</div>
			</div>
		</div><br/>
		<div className="row">
			<div className="col-md-1 col-md-offset-5">
				<button type="button" className="btn btn-default" onClick={this.handleSubmit}>Add to List</button>
			</div>
			<div className="col-md-1">
				<button type="button" onClick={this.handleCancel} className="btn btn-default">Cancel</button>
			</div>
		</div>
      </form>
    );
  } 
});	// EducationForm

var Skills = React.createClass({
  render: function() {
    return (
      <div className="well well-large formInlineStyle">
	      ...
      </div>
    );
  }
});

var Experience = React.createClass({
  render: function() {
    return (
      <div className="well well-large formInlineStyle">
	      ...
      </div>
    );
  }
});