<?php

class VO_Content {
	const _ECP = 'CON';	// Error Code Prefix
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	// TODO: 
	public static
	function saveFullContent( WOOOF $wo, $data, $userId  )
	{
		// 1000
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$userId]" );
		
		// Checks
		//
		if ( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."1000 'userId' must be provided");
			return false;
		}
		
		if ( !$wo->hasContent($data) ) {
			$wo->logError(self::_ECP."1005 'data' must be provided");
			return false;
		}
		
	}	// saveFullContent
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param string $contentId
	 * @param string $requestorUserid
	 * @return false | array[ 'main' => contents rec, 'authors' => [content_authors rec], 'tags' => [v_content_tags rec], 'sections' => [v_content_sections rec + _level + _seq + _numbering ]  
	 */
	public static
	function getContent( WOOOF $wo, $contentId, $requestorUserid )
	{
		// 100
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$contentId] [$requestorUserid]" );
		
		$contentIdSafe = $wo->db->escape($contentId);
		
		$out = [];
	
		// Checks
		//
		if ( !$wo->hasContent($contentId) ) {
			$wo->logError(self::_ECP."0100 'contentId' must be provided");
			return false;
		}
	
		/*
		if ( !$wo->hasContent($requestorUserid) ) {
			$wo->logError(self::_ECP."0105 'requestorUserid' must be provided");
			return false;
		}
		*/
		
		// Gets
		//
		
		// Get main + title
		$contentsRec = $wo->db->getRow( 'contents', $contentId );
		if ( $contentsRec === FALSE ) { return FALSE; }
		if ( $contentsRec === NULL ) {
			$wo->logError(self::_ECP."0120 Content [$contentId] was not found in contents");
			return false;
		}
		
		$out['main'] = $contentsRec;
		
		if ( !self::userAllowedTo($wo, $contentId, $requestorUserid, 'VIEW', $contentsRec ) ) {
			return false;
		}
	
		// Get Authors
		/*
		$sql = "select * from content_authors where contentId = '$contentIdSafe' order by ord";
		$res = $wo->db->getResultByQuery($sql, true, false );
		if ( $res === FALSE ) { return FALSE; }
		*/
		$res = self::authorsGet($wo, $contentId, $requestorUserid);
		if ( $res === FALSE ) { return FALSE; }
		$out['authors'] = $res;
		
		// Get Tags
		$sql = "select * from v_content_tags where contentId = '$contentIdSafe' order by tagType, tagCategoryType";
		$res = $wo->db->getResultByQuery($sql, true, false );
		if ( $res === FALSE ) { return FALSE; }
		$out['tags'] = $wo->db->resultRows;
		
		// Get Sections + Texts + Others
		/*
		$sql = "select * from v_content_sections where contentId = '$contentIdSafe' order by if(belongsToSectionId is null or belongsToSectionId = '', 0, 1), ord";
		$res = $wo->db->getResultByQuery($sql, false, true );
		if ( $res === FALSE ) { return FALSE; }
		$tmpSections = $wo->db->resultRows;
		
		// Now put the sections in order.
		// Based on level and then on 'ord'
		$belongings = [];
		foreach( $tmpSections as $aSection ) {
			$belongings[$aSection['belongsToSectionId']][] = $aSection['id']; 
		}
		//var_dump($b); die();
		
		$orderedSections = [];
		self::recurseSortSections($wo, $belongings, "", $tmpSections, 1, $orderedSections );
		//var_dump($orderedSections); die();
		
		self::addNumberingToSections($wo, $orderedSections);
		
		$out['sections'] = array_values( $orderedSections );
		*/
		$res = self::sectionsGet($wo, $contentId, $requestorUserid);
		if ( $res === FALSE ) { return FALSE; }
		$out['sections'] = $res;
		
		return $out;
	}	// getContent

	/***************************************************************************/
	//
	/***************************************************************************/
	
	private static
	function recurseSortSections( WOOOF $wo, $belongings, $start, $sections, $level, &$orderedSections )
	{
		if ( count($belongings) == 0 ) { return; }
		
		$seq = 1;
		foreach( $belongings[$start] as $anId ) {
			$sections[$anId]['_level'] = $level;
			$sections[$anId]['_seq'] = $seq;
			$orderedSections[$anId] = $sections[$anId];
			//echo  $anId . " " . $sections[$anId]['title'] . " [$level] <br>";
			if ( isset($belongings[$anId]) ) {
				self::recurseSortSections($wo, $belongings, $anId, $sections, $level+1, $orderedSections);
			}
			$seq++;
		}
		return;
	}	// recurseSortSections
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param array $sections	// Ordered sections with _level value already computed
	 * @return boolean
	 */
	private static
	function addNumberingToSections( WOOOF $wo, &$sections )
	{
		$numbering = []; $prevLevel = 0;
		foreach( $sections as &$d ) {
			$l = $d['_level'];
				
			if ( $l > $prevLevel ) { $numbering[$l] = 1; }
			else  { $numbering[$l]++; }
			$prevLevel = $l;
			$numString = '';
			for( $i=1; $i<=$l; $i++ ) { $numString .= $numbering[$i] . '.'; }
			$numString = substr($numString,0,-1);
			
			$d['_numbering'] = $numString;
		}
		
		return true;
	}	// addNumberingToSections
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function userAllowedTo( WOOOF $wo, $contentId, $requestorUserid, $action, $isPartOfIdea = NULL )
	{
		// 300
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$contentId] [$requestorUserid] [$action]" );
		
		// Checks
		//
		if ( !$wo->hasContent($contentId) ) {
			$wo->logError(self::_ECP."0300 'contentId' must be provided");
			return false;
		}
		
		if ( !$wo->hasContent($requestorUserid) ) {
			$wo->logError(self::_ECP."0305 'requestorUserid' must be provided");
			return false;
		}
		
		if ( !$wo->hasContent($action) ) {
			$wo->logError(self::_ECP."0310 'action' must be provided");
			return false;
		}
		
		$requestorUseridSafe	= $wo->db->escape( $requestorUserid );
		$contentIdSafe			= $wo->db->escape( $contentId );
		
		$allowed = 0;
		
		// TODO: Check!!!
		
		// TODO: Different checks for Idea Contents, or standalone Contents
		
		if ( $isPartOfIdea === NULL ) {
			$sql = "select isPartOfIdea from contents where id = '$contentIdSafe'";
			$contentsRec = $wo->db->getRow( 'contents', $contentId );
			if ( $contentsRec === FALSE ) { return FALSE; }
			if ( $contentsRec === NULL ) {
				$wo->logError(self::_ECP."0347 Content with id [$contentIdSafe] was not found");
				return FALSE;
			}
			$isPartOfIdea = $contentsRec['isPartOfIdea'];
		}
		
		if ( $isPartOfIdea ) {
			switch ( $action ) {
				case 'EDIT':
				case 'DELETE':
					$sql = "
						select
							1
						from
							ideas i, 
							idea_versions iv,
							voice_user_groups vug
						where
							i.id = iv.ideaId and
							iv.contentId = '$contentIdSafe' and
							iv.id = i.currentVersionId and
							vug.voiceUserId = '$requestorUseridSafe' and
							vug.groupId = i.ownersGroupId and
							vug.isActive = '1'
					";
					$res = $wo->db->getResultByQuery( $sql, true, false );
					if ( $res === FALSE ) { return FALSE; }
					$allowed = ( count($wo->db->resultRows) > 0 );
					break;

				case 'VIEW':
					// TODO: more complex here...
					$allowed = 1;
					break;
					
				default:
					$wo->logError(self::_ECP."0320 Unknown action [$action]");
					return FALSE;
			}	// which action
		}	
		
		if ( !$allowed ) {
			$wo->logError(self::_ECP."0333 User [$requestorUserid] is not allowd to [$action] (in) content [$contentId]");
			return 0;
		}
		
		return 1;
	}	// userAllowedTo

	/***************************************************************************/
	//
	/***************************************************************************/
	/**
	 * 
	 * @param WOOOF $wo
	 * @param array $data	// as returned by getContent
	 * @param string $requestorUserid
	 * @return false | array[ 'main' => html, 'title' => html, 'authors' => html, 'tags' => html, 'sections' => html ]
	 */
	public static
	function formatFetchedContent( WOOOF $wo, $data, $requestorUserid )
	{
		// 400
		$place = __CLASS__ . '::' . __FUNCTION__;
		//$wo->debug( "$place: " );
	
		$res = [];
	
		// Checks
		//
		if ( !$wo->hasContent($data) or !isset($data['main']) ) {
			$wo->logError(self::_ECP."0400 'data' array must be provided and contain a 'main' key");
			return false;
		}
		
		// main + title
		$d = $wo->getFromArray($data, 'main', [] );
		$res['title'] = "
			<h1>[{$d['id']}] - <i>{$d['title']}</i> <small>({$d['contentTypeDVCode']})</small></h1>
			<p>{$d['subTitle']}</p>
			<p>{$d['snippet']}</p>
		";

		$res['main'] = "
			{$d['createdByUserId']}: {$d['createdDateTime']}<br>
			{$d['updatedByUserId']}: {$d['updatedDateTime']} 
		";

		// author(s)
		$dArr = $wo->getFromArray($data, 'authors', [] );
		$res['authors'] = '';
		foreach( $dArr as $d ) {
			$res['authors'] .= "
			<p>
			{$d['name']} {$d['description']} {$d['email']}
			</p> 
			";
		}
		
		// tags
		$dArr = $wo->getFromArray($data, 'tags', [] );
		$res['tags'] = '';
		foreach( $dArr as $d ) {
			$res['tags'] .= "
			[{$d['tagType']} {$d['tagCategoryType']} {$d['tagText']}] 
			";
		}
		
		// sections
		$dArr = $wo->getFromArray($data, 'sections', [] );
		$res['sections'] = '';
		foreach( $dArr as $d ) {
			$l = $d['_level'];
			
			$h = 'h' . $l;
			$res['sections'] .= "
				<$h>[{$d['_numbering']}] {$d['title']}</$h>
			";
			switch ( $d['sectionType'] ) {
				case 'TEXT':
					$res['sections'] .= "<p>{$d['theText']}</p>";
					break;
				case 'AMOUNT':
					$res['sections'] .= "<p><b>{$d['value2']}</b> {$d['value3']}</p>";
					break;
				default:
					$res['sections'] .= "<p>{$d['value1']} {$d['value2']} {$d['value3']}</p>";
					break;
			}
		}
		
		return $res;
	
	}	// formatFetchedContent
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 * For Testing...
	 * @param WOOOF $wo
	 * @param string $contentId
	 * @param string $requestorUserid
	 * @return false | string	// HTML string
	 */
	public static
	function showContentSimple( WOOOF $wo, $contentId, $requestorUserid )
	{
		// 500
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$contentId] [$requestorUserid]" );
		
		$data = VO_Content::getContent($wo, $contentId, $requestorUserid);
		if ( $data === FALSE ) { return FALSE; }
		$resArr = VO_Content::formatFetchedContent($wo, $data, $requestorUserid);
		if ( $resArr !== FALSE ) {
			$res = $resArr['title'] . $resArr['authors'] . $resArr['main'] .
			'<br><br>' . $resArr['tags'] .
			'<br><br>' . $resArr['sections'] .
			'<br>***The End***<br>';
		}
		
		return $res;
		
	}	// showContentSimple

	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function copyContent( WOOOF $wo, $contentId, $userId, $isPartOfIdea, $copyAsTemplate = false )
	{
		// 600
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$contentId] [$userId] [$copyAsTemplate]" );
	
		$data = VO_Content::getContent($wo, $contentId, $userId);
		if ( $data === FALSE ) { return FALSE; }
		
		$mainData = $data['main'];
		$mainData['id'] = null;	// force copy/creation
		// order below is important. isTemplate is used and then overriden
		$mainData['fromTemplateId']	= ( !$copyAsTemplate and $mainData['isTemplate'] == '1' ? $contentId : null );
		$mainData['isTemplate'] 	= ( $copyAsTemplate ? '1' : '0' );

		$newContentId = self::saveContentMain($wo, $mainData, $userId);
		if ( $newContentId === FALSE ) { return FALSE; }
		
		$res = self::saveAuthors( $wo, $data['authors'], $newContentId, $userId, true );
		if ( $res === FALSE ) { return FALSE; }
		
		$res = self::saveTags( $wo, $data['tags'], $newContentId, $userId, true );
		if ( $res === FALSE ) { return FALSE; }
		
		$res = self::saveSections( $wo, $data['sections'], $newContentId, $userId, true );
		if ( $res === FALSE ) { return FALSE; }
		
		return $newContentId;
	
	}	// copyContent
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function saveContentMain( WOOOF $wo, $mainData, $userId )
	{
		// 700
		$place = __CLASS__ . '::' . __FUNCTION__;
		
		// TODO: Checks

		$tblContents = new WOOOF_dataBaseTable($wo->db, 'contents');
		if($tblContents->constructedOk === FALSE) { return false; }
		
		$obj = new VO_TblContent($mainData);

		$obj->updatedByUserId	= $userId;
		
		if ( !$wo->hasContent($mainData['id']) ) {
			$obj->isDeleted			= '0';
			$obj->createdByUserId	= $userId;
			$obj->createdDateTime	= $wo->currentGMTDateTime();
			$obj->updatedDateTime	= $obj->createdDateTime;
				
			$res = $tblContents->insertRowFromArraySimple( $obj->toArray() );
			if ( $res === FALSE ) { return false; }
		}	// new / insert				
		else {
			$obj->updatedDateTime	= $wo->currentGMTDateTime();

			$res = $tblContents->updateRowFromArraySimple( $obj->toArray() );
			if ( $res === FALSE ) { return false; }
			
			$imgRes = $tblContents->handlePictureUpload('titleImg', $obj->id);
			if($imgRes === FALSE) { return false; }
			
			$res = $mainData['id'];
		}				
	
		return $res;
	
	}	// saveContentAndTitle
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function saveAuthors( WOOOF $wo, $authors, $contentId, $userId, $doInsert )
	{
		// 800
		$place = __CLASS__ . '::' . __FUNCTION__;
		
		if ( !$wo->hasContent($contentId) ) {
			$wo->logError(self::_ECP."0800 'contentId' must be provided" );
			return false;
		}
	
		$tbl = new WOOOF_dataBaseTable($wo->db, 'content_authors');
		if($tbl->constructedOk === FALSE) { return false; }
	
		foreach( $authors as &$anAuthor ) {
			$anAuthor['contentId'] = $contentId;
			$res = self::authorSave($wo, $anAuthor, $userId, $doInsert);
			if ( $res === FALSE ) { return FALSE; }
		}	// for each author
			
		return true;
	
	}	// saveAuthors
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function saveTags( WOOOF $wo, $tags, $contentId, $userId, $doInsert )
	{
		// 900
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( !$wo->hasContent($contentId) ) {
			$wo->logError(self::_ECP."0900 'contentId' must be provided" );
			return false;
		}
	
		$tbl = new WOOOF_dataBaseTable($wo->db, 'content_tags');
		if($tbl->constructedOk === FALSE) { return false; }
	
		foreach( $tags as $aTag ) {
			$obj = new VO_TblContentTag();
			$obj->id				= ( $doInsert ? null : $aTag['id'] );
			$obj->isDeleted			= '0';
			$obj->contentId			= $contentId;
			$obj->tagType			= $aTag['tagType'];
			$obj->tagId				= $aTag['tagId'];
			$obj->tagText			= $aTag['tagText'];
			$obj->tagCategoryType	= $aTag['tagCategoryType'];
	
			if ( !$wo->hasContent($obj->id) ) {
				$newId = $tbl->insertRowFromArraySimple( $obj->toArray() );
				if ( $newId === FALSE ) { return false; }
					
			}	// new / insert
			else {
				$res = $tbl->updateRowFromArraySimple( $obj->toArray() );
				if ( $res === FALSE ) { return FALSE; }
			}	// update
		}	// for each tag
			
		return true;
	
	}	// saveTags
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function saveSections( WOOOF $wo, $sections, $contentId, $userId, $doInsert )
	{
		// 1000
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( !$wo->hasContent($contentId) ) {
			$wo->logError(self::_ECP."1000 'contentId' must be provided" );
			return false;
		}
	
		$sectionIds = [];	// [ 'oldId' => 'newId', ... ]
		
		foreach( $sections as &$aSection ) {
			$aSection['contentId'] = $contentId;
			$res = self::sectionSave($wo, $aSection, $userId, $sectionIds, $doInsert );
			if ( $res === FALSE ) { return FALSE; }
		}	// for each section
			
		return true;
	
	}	// saveSections
	

	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 * 
	 * @param WOOOF $wo
	 * @param array $data	// [ 'title', 'snippet', 'fromTemplateId', .... ]
	 * @param unknown $userId
	 * @return false | id	// new contentId
	 */
	public static
	function createForIdea( WOOOF $wo, $data, $userId  )
	{
		// 1100
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$userId]" );
		
		// Checks
		//
		if ( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."1100 'userId' must be provided");
			return false;
		}
	
		if ( !$wo->hasContentArrayEntry($data, 'title') ) {
			$wo->logError(self::_ECP."1105 'data[title]' must be provided");
			return false;
		}
	
		$obj = new VO_TblContent($data);
		
		if ( isset($data['fromTemplateId']) ) {
			$obj->id = self::copyContent( $wo, $data['fromTemplateId'], $userId, '1' );
			if ( $obj->id === FALSE ) { return FALSE; }
		}
		else {
			$obj->id				= null;
			$obj->isTemplate		= '0';
			$obj->fromTemplateId	= null;
			$obj->languageId		= $wo->myNVL($obj->languageId, 'EN');
			$obj->isPartOfIdea		= '1';
			$obj->contentVisibilityDVCode	= 'IDEA';
			$obj->contentTypeDVCode	= 'IDEA';
		}

		$newId = self::saveContentMain($wo, $obj->toArray(), $userId);
				
		return $newId;
	}	// createForIdea
	
	
	
	/***********************************
	 * Front-end API Calls
	 **********************************/
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function authorSave( WOOOF $wo, $data, $userId, $doInsert = false  )
	{
		// 2000
		
		// Make sure all columns are present in $data.
		// TODO: CAUTION: dangerous ???
		$tmpObj = new VO_TblContentAuthor($data);
		$data = $tmpObj->toArray();
		
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [{$data['id']}] [{$data['contentId']}] [$userId] [$doInsert]" );
			
		// Checks
		//
		if ( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."2000 'userId' must be provided");
			return false;
		}
	
		$allowed = self::userAllowedTo($wo, $data['contentId'], $userId, 'EDIT' );
		if ( $allowed === FALSE ) { return FALSE; }
		if ( $allowed === 0 ) { return FALSE; }
		
		if ( !$wo->hasContent($data) or !isset($data['contentId'])  ) {
			$wo->logError(self::_ECP."2005 'data' (and 'data[contentId'], ... ) must be provided");
			return false;
		}
		
		$tbl = new WOOOF_dataBaseTable($wo->db, 'content_authors');
		if($tbl->constructedOk === FALSE) { return false; }
		
		$obj = new VO_TblContentAuthor();
		$obj->id				= ( $doInsert ? null : $data['id'] );
		$obj->isDeleted			= $wo->myNVL($data['isDeleted'], '0');
		$obj->contentId			= $data['contentId'];
		$obj->ord				= $data['ord'];
		$obj->name				= $data['name'];
		$obj->voiceUserId		= $data['voiceUserId'];
		$obj->description		= $data['description'];
		$obj->email				= $data['email'];
		$obj->webURL			= $data['webURL'];
		$obj->logoURL			= $data['logoURL'];
	
		if ( !$wo->hasContent($obj->id) ) {
			$obj->isDeleted	= '0';
			$newId = $tbl->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
		}	// new / insert
		else {
			$res = $tbl->updateRowFromArraySimple( $obj->toArray() );
			if ( $res === FALSE ) { return FALSE; }
			$newId = $data['id'];
		}	// update
		
		return $newId;
	
	}	// authorSave
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	// TODO:
	public static
	function sectionSave( WOOOF $wo, $data, $userId, &$sectionIds, $doInsert = false   )
	{
		// 3000
		
		if ( !$wo->hasContent($data) or !isset($data['contentId'])  ) {
			$wo->logError(self::_ECP."3005 'data' (and 'data[contentId'], ... ) must be provided");
			return false;
		}
		
		// Make sure all columns are present in $data.
		// TODO: CAUTION: dangerous ???
		$tmpObj = new VO_TblVContentSection($data);
		$data = $tmpObj->toArray();
		
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [{$data['id']}] [{$data['contentId']}] [$userId] [$doInsert]" );
	
		// TODO: Check updates also!!!!
		
		
		// Checks
		//
		if ( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."3000 'userId' must be provided");
			return false;
		}
	
		if ( !$wo->hasContent($data['sectionType']) ) {
			$wo->logError(self::_ECP."3020 'data['sectionType']' must be provided");
			return false;
		}
	
		$allowed = self::userAllowedTo($wo, $data['contentId'], $userId, 'EDIT' );
		if ( $allowed === FALSE ) { return FALSE; }
		if ( $allowed === 0 ) { return FALSE; }
			
		$tblSect = new WOOOF_dataBaseTable($wo->db, 'content_sections');
		if($tblSect->constructedOk === FALSE) { return false; }
	
		$tblText = new WOOOF_dataBaseTable($wo->db, 'content_section_texts');
		if($tblText->constructedOk === FALSE) { return false; }
	
		$tblOth = new WOOOF_dataBaseTable($wo->db, 'content_section_others');
		if($tblOth->constructedOk === FALSE) { return false; }
	
		$obj = new VO_TblContentSection();
		$obj->id				= ( $doInsert ? null : $data['id'] );
		$obj->isDeleted			= '0';
		$obj->contentId			= $data['contentId'];
		$obj->sectionType		= $data['sectionType'];
		$obj->ord				= $data['ord'];
		$obj->title				= $data['title'];

		// TODO: Should call a save/copy attachmentSet first!!!!
		$obj->attachmentSetId	= $data['attachmentSetId'];	
		
		$obj->fromTemplateSectionId	= $data['fromTemplateSectionId'];
		$obj->mnemonicCode		= $data['mnemonicCode'];
		
		$obj->belongsToSectionId = ( 
			$wo->hasContent($data['belongsToSectionId']) ? 
			$sectionIds[$data['belongsToSectionId']] : null 
		);
			
		if ( !$wo->hasContent($obj->id) ) {
			$newId = $tblSect->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }

			if ( $wo->hasContent($data['id']) ) {
				$sectionIds[$data['id']] = $newId;
			}
		}	// new / insert
		else {
			$res = $tblSect->updateRowFromArraySimple( $obj->toArray() );
			if ( $res === FALSE ) { return FALSE; }
			$newId = $obj->id;	// for symmetry below
		}	// update
		
		// Take care of Section detail/data
		//
		if ( $obj->sectionType == 'TEXT' ) {
			$objText = new VO_TblContentSectionText();
			$objText->id				= ( $doInsert ? null : $data['textSectionId'] );
			$objText->contentSectionId	= $newId;
			$objText->theText			= $data['theText'];
			
			if ( !$wo->hasContent($data['typeOfText']) ) {
				$data['typeOfText'] = 'PLAIN';
			}
			
			$objText->typeOfText		= $data['typeOfText'];
				
			if ( !$wo->hasContent($objText->id) ) {
				$res = $tblText->insertRowFromArraySimple($objText->toArray());
			}
			else {
				$res = $tblText->updateRowFromArraySimple($objText->toArray());
			}
			if ( $res === FALSE ) { return FALSE; }
		}
		else {
			// sectionType other than TEXT
			$objOth = new VO_TblContentSectionOther();
			$objOth->id				= ( $doInsert ? null : $data['otherSectionId'] );
			$objOth->contentSectionId	= $newId;
			$objOth->value1			= $data['value1'];
			$objOth->value2			= $data['value2'];
			$objOth->value3			= $data['value3'];

			if ( !$wo->hasContent($objOth->id) ) {
				$res = $tblOth->insertRowFromArraySimple($objOth->toArray());
			}
			else {
				$res = $tblOth->updateRowFromArraySimple($objOth->toArray());
			}
			if ( $res === FALSE ) { return FALSE; }
		}	// what sectionType
		
		return $newId;
	
	}	// sectionSave
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	// TODO:
	public static
	function authorDelete( WOOOF $wo, $data, $userId  )
	{
		// 2100
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$userId]" );
	
		// Checks
		//
		if ( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."2100 'userId' must be provided");
			return false;
		}
	
		if ( !$wo->hasContent($data) or !isset($data['id']) or !isset($data['contentId']) ) {
			$wo->logError(self::_ECP."2105 'data' and its fields must be provided");
			return false;
		}
		
		$idSafe = $wo->db->escape( $data['id'] ); 
		
		$allowed = self::userAllowedTo($wo, $data['contentId'], $userId, 'DELETE' );
		if ( $allowed === FALSE ) { return FALSE; }
		if ( $allowed === 0 ) { return FALSE; }
		
		
		$sql = "delete from content_authors where id = '$idSafe'";
		$succ = $wo->db->query( $sql );
		
		if ( $succ === FALSE ) { return FALSE; }
		
		return TRUE;
	
	}	// authorDelete
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	// TODO:
	public static
	function sectionDelete( WOOOF $wo, $data, $userId, $recursive = false, $chekAllowed = true )
	{
		// 3100
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$userId] [$recursive]" );
	
		// Checks
		//
		if ( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."3100 'userId' must be provided");
			return false;
		}
	
		if ( !$wo->hasContent($data) ) {
			$wo->logError(self::_ECP."3105 'data' must be provided");
			return false;
		}

		if ( !$wo->hasContent($data) or !isset($data['id']) or !isset($data['contentId']) ) {
			$wo->logError(self::_ECP."2105 'data' and its fields must be provided");
			return false;
		}
		
		$id		= $data['id'];
		$idSafe = $wo->db->escape( $id );
		
		if ( $chekAllowed ) {
			$allowed = self::userAllowedTo($wo, $data['contentId'], $userId, 'DELETE' );
			if ( $allowed === FALSE ) { return FALSE; }
			if ( $allowed === 0 ) { return FALSE; }
		}		
		
		// Take care of subsections
		//
		
		$sectionsBelowTbl = new WOOOF_dataBaseTable( $wo->db, 'content_sections' );
		if ( !$sectionsBelowTbl->constructedOk ) { return FALSE; }
			
		$sql = "select id, contentId from content_sections where belongsToSectionId = '$id'";
		$res= $sectionsBelowTbl->getResultByQuery($sql, true, false);
		if ( $res === FALSE ) { return FALSE; }
			
		
		if ( $recursive ) {
			// Delete subSections recursively
			foreach( $sectionsBelowTbl->resultRows as $aSubSection ) {
				$res = self::sectionDelete($wo, $aSubSection, $userId, true, false );
				if ( $res === FALSE ) { return FALSE; }
			}
		}	// recursive
		else {
			// reposition sub Sections
			$newParentId = $data['belongsToSectionId'];	// set to parent of deleted section
			
			foreach( $sectionsBelowTbl->resultRows as $aSubSection ) {
				$sql = "update content_sections set belongsToSectionId = '$newParentId' where id = '{$aSubSection['id']}'";
				$res = $wo->db->query( $sql );
				if ( $res === FALSE ) { return FALSE; }
			}
		}
		
		// Delete (sub)Section and related records
		//
		$sql = "delete from content_section_texts where contentSectionId = '$idSafe'";
		$succ = $wo->db->query( $sql );
		if ( $succ === FALSE ) { return FALSE; }
		
		$sql = "delete from content_section_others where contentSectionId = '$idSafe'";
		$succ = $wo->db->query( $sql );
		if ( $succ === FALSE ) { return FALSE; }
		
		$sql = "delete from content_sections where id = '$idSafe'";
		$succ = $wo->db->query( $sql );
		if ( $succ === FALSE ) { return FALSE; }
		
		return TRUE;
		
	}	// sectionDelete
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	// TODO:
	public static
	function authorsGet( WOOOF $wo, $contentId, $userId  )
	{
		// 2200
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$contentId] [$userId]" );
	
		// Checks
		//
		if ( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."2200 'userId' must be provided");
			return false;
		}
	
		if ( !$wo->hasContent($contentId) ) {
			$wo->logError(self::_ECP."2205 'contentId' must be provided");
			return false;
		}
		
		$contentIdSafe = $wo->db->escape($contentId);
		
		// Get Authors
		$sql = "select * from content_authors where contentId = '$contentIdSafe' order by ord";
		$res = $wo->db->getResultByQuery($sql, true, false );
		if ( $res === FALSE ) { return FALSE; }
		
		return $wo->db->resultRows;
	
	}	// authorsGet
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	public static
	function sectionsGet( WOOOF $wo, $contentId, $userId  )
	{
		// 3200
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place: [$contentId] [$userId]" );
	
		// Checks
		//
		if ( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."3200 'userId' must be provided");
			return false;
		}
	
		if ( !$wo->hasContent($contentId) ) {
			$wo->logError(self::_ECP."3205 'contentId' must be provided");
			return false;
		}

		$contentIdSafe = $wo->db->escape($contentId);
		
		$sql = "select * from v_content_sections where contentId = '$contentIdSafe' order by if(belongsToSectionId is null or belongsToSectionId = '', 0, 1), ord";
		$res = $wo->db->getResultByQuery($sql, false, true );
		if ( $res === FALSE ) { return FALSE; }
		
		$tmpSections = $wo->db->resultRows;
		
		// Now put the sections in order.
		// Based on level and then on 'ord'
		$belongings = [];
		foreach( $tmpSections as $aSection ) {
			$belongings[$aSection['belongsToSectionId']][] = $aSection['id'];
		}
		//var_dump($b); die();
		
		$orderedSections = [];
		self::recurseSortSections($wo, $belongings, "", $tmpSections, 1, $orderedSections );
		//var_dump($orderedSections); die();
		
		self::addNumberingToSections($wo, $orderedSections);
		
		return array_values($orderedSections);
		
	}	// sectionsGet
	
	
	
	
}	// VO_Content