import React from 'react';
import ReactDom from 'react-dom';
import Reputation from './PostReputationComp.jsx';
import PostInput from './PostInputComp.jsx';
import PersonDisplay from './SmallPersonPresentationComp.jsx';

var RB = require('react-bootstrap');

export default React.createClass({
	getInitialState: function()
	{
		var reputation = {thumbsUp: this.props.data.thumbsUp, thumbsDown: this.props.data.thumbsDown, postId: this.props.data.id};
		return { 
				commentsVisible: false,
				commentsNumber: this.props.data.comments.length,
				comments: this.props.data.comments,
				reputation: reputation,
				commentsBlockIdentifier: 'commentBlock_' + this.props.data.id
				};
	},

	render: function()
	{
		return (
				<RB.Well key={this.props.data.id}>
				   <RB.Row>
					    <RB.Col md={10}>
							<RB.Panel header={this.props.data.title}>
						      {this.props.data.content}
						      <Reputation data = {this.state.reputation} /> {this.props.data.visibilityLiteral}
						    </RB.Panel>
						</RB.Col>
						<RB.Col md={2}>
						<PersonDisplay data={this.props.data.userData} key={this.props.data.userData.id +'_'+ this.props.data.userData.date}/>
						</RB.Col>
				    </RB.Row>
				    { !this.state.commentsVisible ? <RB.Button onClick={this.displayComments}>{this.state.commentsNumber} Comments</RB.Button> : null}
				    <RB.Panel collapsible expanded={this.state.commentsVisible}>
				    	<CommentsBlock data = { {comments: this.state.comments, postId: this.props.data.id} } key={this.state.commentsBlockIdentifier}/>
			        </RB.Panel>
				</RB.Well>
			);
	},

	displayComments: function()
	{
		var tmp = this.state;
		tmp.commentsVisible = true;
		this.setState(tmp);
	}
});

var CommentsBlock = React.createClass({
	
	getInitialState: function()
	{
		return {comments: this.props.data.comments};
	},

	render: function()
	{
		var comments = [];
		this.state.comments.forEach(function (comment)
		{
			var reputation = {thumbsUp: comment.thumbsUp, thumbsDown: comment.thumbsDown, postId: comment.id};
			comments.push(<RB.Row key={comment.id}>
					    <RB.Col md={10}>
							<RB.Panel>
							{comment.content}
							<Reputation data = {reputation} />
							</RB.Panel>
						</RB.Col>
						<RB.Col md={2}>
							<PersonDisplay data={window.postersData[comment.userId]} key={comment.userId +'_'+ comment.entryDate}/>
						</RB.Col>
				    </RB.Row>

			);
		});

		var inputData = {
							parentPostId: this.props.data.postId,
							postBoxId: null,
							showPrivacy: false,
						};
		var inputLookUps = 	{ 
								POST_PRIVACY_CHOICES: null, 
							};
		return(
			<div>
			{comments}
			<PostInput data={inputData} lookUps = {inputLookUps} newInsertCallBack = {this.handleCommentInsert}/>
			</div>
			);
	},

	handleCommentInsert: function(responseData)
	{
		var tmp = this.state;
		tmp.comments.push(responseData);
		this.setState(tmp);
	},

});