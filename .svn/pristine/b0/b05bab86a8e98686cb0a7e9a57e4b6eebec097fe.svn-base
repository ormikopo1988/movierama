<?php

class VO_Badges {
	const _ECP = 'BAD';	// Error Code Prefix
	
	
	/***************************************************************************/
	//
	/***************************************************************************/
  
	/**
	 * 
	 * @param WOOOF $wo
	 * @param VO_TblVoiceUserBadges $obj
	 * @param bool $fetchBack
	 * @return false | id
	 * Returns actually saved $obj if $fetchBack is set to true
	 */
	public static 
	function save( WOOOF $wo, VO_TblVoiceUserBadges &$obj, $fetchBack=true )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
	    
		if ( !$wo->hasContent($obj->voiceUserId) ) {
			$wo->logError(self::_ECP."3295 No value provided for [voiceUserId]" );
			return false;
		}
		
		if ( !$wo->hasContent($obj->badgeId) ) {
			$wo->logError(self::_ECP."3296 No value provided for [badgeId]" );
			return false;
		}
		
		$tblVoiceUserBadges = new WOOOF_dataBaseTable($wo->db, 'voice_user_badges');
		if($tblVoiceUserBadges === FALSE) { return false; }
			
		if ( $wo->hasContent($obj->id) ) {
			// update
			$obj->effectiveDate = WOOOF::getCurrentDateTime();
			
			$res = $tblVoiceUserBadges->updateRowFromArraySimple( $obj->toArray() );
			
			if ( $res === FALSE ) { return FALSE; }
		}
		else {
			// insert
			$obj->effectiveDate = WOOOF::getCurrentDateTime();
			
			$newId = $tblVoiceUserBadges->insertRowFromArraySimple( $obj->toArray() );
			if ( $newId === FALSE ) { return false; }
			$obj->id = $newId;
		}

		if ( $fetchBack ) {
			// Get back into $obj based on id
			// TODO:
		}
	  
		return $obj->id;
	}	// save
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $voiceUserId
	 * @return false | [] user badges array
	 */
	public static
	function getVoiceUserBadges( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
		 
		if ( !$wo->hasContent($voiceUserId) ) {
			$wo->logError(self::_ECP."3299 No value provided for [voiceUserId]" );
			return false;
		}
	
		$badges = []; //array to be sent to react element
		$badgesElems = ['id', 'effectiveDate', 'voiceUserId', 'badgeId', 'points', 'badgeLevel'];
		
		$tblVoiceUserBadges = new WOOOF_dataBaseTable($wo->db, 'voice_user_badges');
		if($tblVoiceUserBadges === FALSE) { return false; }
			
		//take registration badge
		$res = $tblVoiceUserBadges->getResult(
			[
				'voiceUserId' => $voiceUserId,
				'isDeleted' => '0'
			],
			'badgeLevel', '', '', '', false, true
		);
			
		if ( $res === FALSE ) { return false; }
		
		foreach( $tblVoiceUserBadges->resultRows as $aBadge ) {
			$badge = [];
			WOOOF_Util::filterOnKeys($badge, $badgesElems, $aBadge);
			
			$badgeInfo = $wo->db->getRow('badges', $aBadge['badgeId']); //fernei olo to row
			$badge['badgeName'] 		 		= $badgeInfo['name'];
			$badge['badgeStatisticType'] 		= $badgeInfo['badgeType'];
			$badge['badgeValueNeededForBronze'] = $badgeInfo['valueNeededForBronze'];
			$badge['badgeValueNeededForSilver'] = $badgeInfo['valueNeededForSilver'];
			$badge['badgeValueNeededForGold']   = $badgeInfo['valueNeededForGold'];
			
			array_push($badges, $badge);
		}
		 
		return $badges;
	}	// getVoiceUserBadges
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $voiceUserId
	 * @return false | true
	 */
	public static
	function updateVoiceUserBadgesTable( WOOOF $wo, $voiceUserId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
			
		if ( !$wo->hasContent($voiceUserId) ) {
			$wo->logError(self::_ECP."3499 No value provided for [voiceUserId]" );
			return false;
		}
	
		//GET ALL AVAILABLE BADGES
		$tblBadges = new WOOOF_dataBaseTable($wo->db, 'badges');
		if($tblBadges === FALSE) { return false; }
			
		//TODO - WHEN READY MAKE IT SEARCH FOR ALL BADGES AND NOT THE FIRE ONE FOR TEST HERE
		$res = $tblBadges->getResult(
			[
				'id'		=> '1122334451',
				'isDeleted' => '0'
			],
			'', '', '', '', false, true
		);
			
		if ( $res === FALSE ) { return false; }
		
		foreach( $tblBadges->resultRows as $aBadge ) {
			$points = self::computeVoiceUserBadgePoints($wo, $voiceUserId, $aBadge['id']);
			if ( $points === FALSE ) { return false; }
		}
			
		return true;
	}	// updateVoiceUserBadgesTable
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param string $voiceUserId
	 * @param string $badgeId
	 * @return false | points
	 */
	public static
	function computeVoiceUserBadgePoints( WOOOF $wo, $voiceUserId, $badgeId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		$wo->debug( "$place:  " );
			
		if ( !$wo->hasContent($voiceUserId) ) {
			$wo->logError(self::_ECP."3129 No value provided for [voiceUserId]" );
			return false;
		}
		
		if ( !$wo->hasContent($badgeId) ) {
			$wo->logError(self::_ECP."3138 No value provided for [badgeId]" );
			return false;
		}
	
		//Get the badge info
		$badge = $wo->db->getRow('badges', $badgeId);
		if($badge === FALSE) { return false; }
		
		/////////////////////////////////////////////
		
		//check if the user has or not the badge already
		$tblVoiceUserBadges = new WOOOF_dataBaseTable($wo->db, 'voice_user_badges');
		if($tblVoiceUserBadges === FALSE) { return false; }
			
		$res = $tblVoiceUserBadges->getResult(
			[
				'voiceUserId' => $voiceUserId,
				'badgeId'	  => $badgeId,
				'isDeleted'   => '0'
			],
			'', '', '', '', false, true
		);
		if ( $res === FALSE ) { return false; }
		
		$points = 0;
		$completePercentage = 0;
		
		//already I am at least in the 3 (bronze) level - it means I have the badge
		if($res['totalRows'] !== 0) {
			foreach( $tblVoiceUserBadges->resultRows as $aUserBadge ) {
				//not gold level
				if($aUserBadge['badgeLevel'] !== '1') {
					switch ( $badge['badgeType'] ) {
						case 'publishIdea':
							if($aUserBadge['badgeLevel'] === '3') { //case i am bronze
								//get points from antonis
								$points = 11;
								$completePercentage = ($points / $badge['valueNeededForSilver']) * 100;
							}
							else { //case i am silver
								//get points from antonis
								$points = 12;
								$completePercentage = ($points / $badge['valueNeededForGold']) * 100;
							}
							break;
								
						case 'uponGraduationIdea':
							if($aUserBadge['badgeLevel'] === '3') { //case i am bronze
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForSilver']) * 100;
							}
							else { //case i am silver
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForGold']) * 100;
							}
							break;
					
						case 'comments':
							if($aUserBadge['badgeLevel'] === '3') { //case i am bronze
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForSilver']) * 100;
							}
							else { //case i am silver
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForGold']) * 100;
							}
							break;
								
						case 'invitationsSent':
							if($aUserBadge['badgeLevel'] === '3') { //case i am bronze
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForSilver']) * 100;
							}
							else { //case i am silver
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForGold']) * 100;
							}
							break;
					
						case 'contentProduction':
							if($aUserBadge['badgeLevel'] === '3') { //case i am bronze
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForSilver']) * 100;
							}
							else { //case i am silver
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForGold']) * 100;
							}
							break;
								
						case 'likes':
							if($aUserBadge['badgeLevel'] === '3') { //case i am bronze
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForSilver']) * 100;
							}
							else { //case i am silver
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForGold']) * 100;
							}
							break;
					
						case 'sharingIn':
							if($aUserBadge['badgeLevel'] === '3') { //case i am bronze
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForSilver']) * 100;
							}
							else { //case i am silver
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForGold']) * 100;
							}
							break;
								
						case 'sharingOut':
							if($aUserBadge['badgeLevel'] === '3') { //case i am bronze
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForSilver']) * 100;
							}
							else { //case i am silver
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForGold']) * 100;
							}
							break;
								
						case 'followings':
							if($aUserBadge['badgeLevel'] === '3') { //case i am bronze
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForSilver']) * 100;
							}
							else { //case i am silver
								$completePercentage = ($aUserBadge['points'] / $badge['valueNeededForGold']) * 100;
							}	
							break;
					}
					//Now I have $completePercentage, $points,
					//$aUserBadge['badgeLevel'] available
					//TODO - UPDATE user_badges points and badgeLevel if needed
					$voiceUserBadge = new VO_TblVoiceUserBadges($aUserBadge);
					$voiceUserBadge->voiceUserId = $voiceUserId;
					$voiceUserBadge->points = $points;
					if( $completePercentage >= 100 ) {
						if($aUserBadge['badgeLevel'] === '3') {
							$voiceUserBadge->badgeLevel = '2';
						}
						else {
							$voiceUserBadge->badgeLevel = '1';
						}
					}
					
					$updatedBadgeId = self::save($wo, $voiceUserBadge);
					if ( $updatedBadgeId === FALSE ) { return false; }
					$wo->db->commit();
				}
				else { //case I am gold
					return $aUserBadge['points'];
				}
			}
		}
		
		else {
			//TODO - NO BADGE FOUND THEN INSERT USER BUDGE IN TABLE IF NEEDED
			
		}
		
		//////////////////////////////////////////////
			
		return $points;
	}	// computeVoiceUserBadgePoints

}	// VO_Badges