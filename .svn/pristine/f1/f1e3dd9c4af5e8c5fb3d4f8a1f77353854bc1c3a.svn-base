<?php

class VO_CtrlSocial {
	const _ECP = 'CSO';	// Error Code Prefix
  
	/**
	 * 
	 * @param WOOOF $wo
	 * @param id $userId (userId to follow)
	 * @return false | [ 'followOk' => bool, 'followingRecId' => id, 'errors' => array ]
	 */
	public static 
	function followUser( WOOOF $wo, $userId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
		
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
		
		if( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."2102 You must provide a user ID to follow!");
			return false;
		}
		
		$res =  VO_Social::userFollows($wo, $wo->app->userId, $userId);
		
		if ( $res === FALSE ) {
			$out = [
				'followOk' => false,
				'errors' => $wo->getErrorsAsArrayAndClear()
			];
			$wo->db->rollback();
		}
		
		else {
			$out = [
				'followOk'			=> true,
				'followingRecId'	=> $res
			];
			$wo->db->commit();
		}
		
		return $out;
	}	// followUser
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $userId (userId to unfollow)
	 * @return [ 'unFollowOk' => bool, 'unFollowingRecId' => id, 'errors' => array ]
	 */
	public static
	function unFollowUser( WOOOF $wo, $userId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
		
		if( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."2103 You must provide a user ID to unfollow!");
			return false;
		}
	
		$res =  VO_Social::userUnFollows($wo, $wo->app->userId, $userId);
	
		if ( $res === FALSE ) {
			$out = [
				'unFollowOk' => false,
				'errors' => $wo->getErrorsAsArrayAndClear()
			];
			$wo->db->rollback();
		}
	
		else {
			$out = [
				'unFollowOk'			=> true,
				'unFollowingRecId'	=> $res
			];
			$wo->db->commit();
		}
	
		return $out;
	}	// followUser
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $userId (userId to request friendship)
	 * @return [ 'requestOk' => bool, 'requestId' => id, 'errors' => array ]
	 */
	public static
	function requestFriendship( WOOOF $wo, $userId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
		
		if( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."2104 You must provide a user ID to request friendship from!");
			return false;
		}
	
		$res =  VO_Social::userRequestFriendShip($wo, $wo->app->userId, $userId);
	
		if ( $res === FALSE ) {
			$out = [
				'requestOk' => false,
				'errors' => $wo->getErrorsAsArrayAndClear()
			];
			$wo->db->rollback();
		}
	
		else {
			$out = [
				'requestOk'			=> true,
				'requestId'	=> $res
			];
			$wo->db->commit();
		}
	
		return $out;
	}	// requestFriendship
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $in ($in['requestId'] -> id of friend request, $in['status'] -> reply to the request)
	 * @return [ 'requestAnsweredOk' => bool, 'requestAnsweredId' => id, 'errors' => array ]
	 */
	public static
	function answerFriendship( WOOOF $wo, $in )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
		
		if( !$wo->hasContentArrayEntry($in, 'requestId' ) ) {
			$wo->logError(self::_ECP."2105 You must provide a request ID to answer!");
			return false;
		}
		
		if( !$wo->hasContentArrayEntry($in, 'status' ) ) {
			$wo->logError(self::_ECP."2106 You must provide an answer to the friend request!");
			return false;
		}
	
		$res =  VO_Social::userAnswerFriendShip($wo, $in['requestId'], $in['status']);
	
		if ( $res === FALSE ) {
			$out = [
				'requestAnsweredOk' => false,
				'errors' => $wo->getErrorsAsArrayAndClear()
			];
			$wo->db->rollback();
		}
	
		else {
			$out = [
				'requestAnsweredOk'	=> true,
				'requestAnsweredId'	=> $res
			];
			$wo->db->commit();
		}
		
		return $out;
	}	// answerFriendship
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $userId (id of user to delete the friendship you have with)
	 * @return [ 'friendshipDeletedOk' => bool, 'friendshipDeletedId' => id, 'errors' => array ]
	 */
	public static
	function deleteFriendship( WOOOF $wo, $userId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
		
		if( !$wo->hasContent($userId) ) {
			$wo->logError(self::_ECP."2107 You must provide a user ID to delete friendship with!");
			return false;
		}
	
		$res =  VO_Social::userDeleteFriendShip($wo, $wo->app->userId, $userId);
	
		if ( $res === FALSE ) {
			$out = [
				'friendshipDeletedOk' => false,
				'errors' => $wo->getErrorsAsArrayAndClear()
			];
			$wo->db->rollback();
		}
	
		else {
			$out = [
				'friendshipDeletedOk'	=> true,
				'friendshipDeletedId'	=> $res
			];
			$wo->db->commit();
		}
	
		return $out;
	}	// deleteFriendship
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $requestorUserId (id of user that requested to see his/her connections with others)
	 * @param array $targetIds (ids of users to see the connection status)
	 * @return [ 'getConnectionsOk' => bool, 'errors' => array ]
	 */
	public static
	function connectionInfo( WOOOF $wo, $in )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
	
		$res =  VO_Social::getConnectionInfo($wo, $in['requestorId'], $in['targetIds']);
		
		if ( $res === FALSE ) {
			$out = [
					'getConnectionsOk' => false,
					'errors' => $wo->getErrorsAsArrayAndClear()
			];
			$wo->db->rollback();
		}
	
		else {
			$out = [
					'getConnectionsOk'	=> true,
					'getConnections'	=> array_values($res)
			];
			$wo->db->commit();
		}
	
		return $out;
	}	// connectionInfo
	
	/***************************************************************************/
	//
	/***************************************************************************/
	
	/**
	 *
	 * @param WOOOF $wo
	 * @param id $requestId (id of request to reset)
	 * @param array $targetIds (ids of users to see the connection status)
	 * @return [ 'getConnectionsOk' => bool, 'errors' => array ]
	 */
	public static
	function deleteUserFriendRequests( WOOOF $wo, $requestId )
	{
		$place = __CLASS__ . '::' . __FUNCTION__;
	
		if ( $wo->userData['id'] == '0123456789' ) {
			$wo->handleShowStopperError('505');
		}
	
		$res =  VO_Social::deleteUserFriendRequests($wo, $requestId);
	
		if ( $res === FALSE ) {
			$out = [
				'resetFriendRequestOk' => false,
				'errors' => $wo->getErrorsAsArrayAndClear()
			];
			$wo->db->rollback();
		}
	
		else {
			$out = [
				'resetFriendRequestOk'	=> true,
				'resetFriendRequestId'	=> $res
			];
			$wo->db->commit();
		}
	
		return $out;
	}	// deleteUserFriendRequests
	
}	// VO_CtrlSocial